此时发现一个问题，就是不太享受这个学习过程。
识别出自己之前的认识和腾飞的讲解有什么不同？ 找出他是如何得到这样的认识的？=》因为自己的认识和认识的方式有问题。
自己看到东西，基本上就是几个文字而已，顶多照着demo做一遍vs大白话它是什么?能干什么？ 内部机制流程是什么？
为什么听了他讲的后就很清楚，很明白，很容易理解呢？=》大白话，深入浅出，整体脉络都有，
第一次尝试不能慌，不能手足无措


0.乐趣所在，认真 等等积极东西
1.不心生恐惧     等等负面东西
2.罗列翻译，翻译翻译就是知道它的过程
3.对比，条理，概况，学习框架   等等技巧
4.做事总是不完整，缺乏了过程。=》积累就是过程的积累，是不可能偷懒的，一个名词就是一个过程，没有积累，你看到名词就是几个汉字，不知道其中的内容
5:要自己能分析出这个过程 如：微服务带来的好处=》这是一个怎样的过程呢？要自己能分析出这个过程
6.本质是什么？是开发过程？ 是单体时的开发过程和微服务时的开发过程，以及有了k8s之后，微服务的开发过程。
7.总结出一个学习方法，
8.对心态有了新的认识=》例如不要收视频时间等因素的干扰，心无旁骛的去干该干的事情
问题3：  clone_url = "http://localhost:8090/"=》一直都没有找到错误的关键，在其他的地方持续，重复的瞎徘徊，要么是信息错误，要么是网络问题=》对自己不清楚的情况，往往举手无措，不知道怎么办？也进不去思考分析的步骤，所以多了解=》文档啊，文档最清楚，可以让我们了解更多
问题3：如果我们直接看到这句话开启api server的本地监听端口，照做会有什么问题呢？=》我们不知道它是通过开启代理，来访问集群内部的服务 这个本质的。
问题0：翻译，能否自己独立看文档后翻译呢？
问题8：此时笔记本键盘带来的不适，影响学习进度=》有了问题就去解决，有了新情况就去适应
***********************************华丽的分割线************************************************
问题1：干什么事都是有方式方法的，任何优秀的人都是有自己的一套东西在推动的，如果能觉察到别人的方法，抽象出来，也是很有用的额，先模仿，再使用。=》不仅仅是技巧上，而且精神层面的也是必不可少的，第一重要。
问题2：看了如何阅读一本书后，就要对自己的阅读进行升级，=》之前只是一点一点的学，顺着一点一点理出个脉络，了解其中的过程，这是不够的。
问题2.2：看了科比的书之后，就要对自己的精神层面的东西进行升级，=》之前只是头疼医头脚疼医脚，局部，不整体，不系统，不全面，不过程，而现在有个活生生的例子，给你作参考。
问题1：你看你边看边听，没仔细听或者听的不清晰，都会导致你打字出错，最终反复返工=》你想想如果你人生道路，学习道路等，不清晰，不准确的话，那结果可想而知了，这个时候你就没有个隐喻来判断你对错了，你连纠正的想法都产生不了，你完了。=>思路延展，那你在其他的时候有没有一个隐喻呢，比如说你在把注意力放在看电视打游戏的时候，有没一个隐喻纠正你呢，比如你边听边打字的时候，重复返工时，或者心态不对阻扰你行动时，此时有没有隐喻呢，=》思考的重要性，原本我只是想说明下打字的问题，谁知引出来隐喻
问题2：概念的理解，工具的理解，对应不同知识具体要如何理解？详细理解的过程， 过程中的技巧

这三个问题还是很经典的，很系统的（方向要对，心态要好，技巧要有）
问题1：学习新东西，最重要的是看文档，看官方文档，看经典文档，看大师的文档=》路子要选对
问题2：翻译，首先都是资源嘛，工具就是对资源的操作嘛问题3：总结，抽象，对策=》对每种不同的东西有不同的对策，如工具类的，熟悉就好，概念类的就不同了。问题1：你看你边看边听，没仔细听或者听的不清晰，都会导致你打字出错，最终反复返工=》你想想如果你人生道路，学习道路等，不清晰，不准确的话，那结果可想而知了，这个时候你就没有个隐喻来判断你对错了，你连纠正的想法都产生不了，你完了。=>思路延展，那你在其他的时候有没有一个隐喻呢，比如说你在把注意力放在看电视打游戏的时候，有没一个隐喻纠正你呢，比如你边听边打字的时候，重复返工时，或者心态不对阻扰你行动时，此时有没有隐喻呢，=》思考的重要性，原本我只是想说明下打字的问题，谁知引出来隐喻
问题2：当然最重要的是，当你晚睡的时候，你有没有隐喻呢，问题3：目标
问题4：整体上的认识要有，之前要么没有，要么没意识到有整体的概念=》每一个资源啊， 每一个资源分为一块，每一个资源它的定义，最开始有一个apiversion，=》先有一个整体的认识，再去看细节。
问题5：有问题，找答案，找资料，上google
问题6：学习工具类的技巧=》心态+方式=》不要看到这么多的参数，就慌了，就觉得沮丧了，这心态不对，
问题7:慢慢你用着用着就熟悉了=>说明什么？先用起来，从最简单的开始用起来，慢慢就熟悉了，没必要一开始就把所有的都记下了，那负担有点大问题8：各种资源是如何联系的？如何交互的？
问题9：一般都有默认实现
问题10:洞察力=>多套测试环境
问题11:学习一个概念的东西时的技巧=》先知道它是干什么的，再去看细节
问题12：举例说明


问题1：干什么事都是有方式方法的，任何优秀的人都是有自己的一套东西在推动的，如果能觉察到别人的方法，抽象出来，也是很有用的额，先模仿，再使用。=》不仅仅是技巧上，而且精神层面的也是必不可少的，第一重要。
问题1：做的事情，学习的东西等，要做到心中有数？=》那就是要有个概况，=》这也是个过程
1.k8s是什么？
2.它能够干什么呢？ 为什么如此的重要？
3.我们该如何来学习它？

但是，在这里呢，我们先简单把它分为6个步骤
1.先了解全貌和整体
2.对整体结构进入拆分，梳理脉络
3.马上开始行动
4.在行动的过程中逐步加深，每一阶段有阶段性目标
5.及时进行回顾与复盘，与理论相结合
6.输出

这个是我给大家推荐的一个k8s的这个学习路径
1.了解基本概念及核心组件
2.使用本地单节点集群来学习k8s
3.用kubectl与本地集群建立连接
4.部署服务到k8s集群
5.对k8s服务进行扩容，更新
6.进一步学习k8s资源（pod，deployment，service，statefulset，ingress。。。）
7.设计微服务
8.搭建k8s集群或者使用云服务商的k8s服务
9.添加持续集成，日志搜集，监控和指标度量。跟踪

我们会按照这样的步骤 
1.k8s集群基本概念
2.本地搭建k8s单节点集群
3.pod&service&deployment  
4.service的三种类型  
5.yaml部署文件语法初体验=》此步骤
6.初始化一个。net core api并push到docker hub
7.把net coreapi 部署到k8s
8.k8s集群高级概念



问题1：你看你边看边听，没仔细听或者听的不清晰，都会导致你打字出错，最终反复返工=》你想想如果你人生道路，学习道路等，不清晰，不准确的话，那结果可想而知了，这个时候你就没有个隐喻来判断你对错了，你连纠正的想法都产生不了，你完了。=>思路延展，那你在其他的时候有没有一个隐喻呢，比如说你在把注意力放在看电视打游戏的时候，有没一个隐喻纠正你呢，比如你边听边打字的时候，重复返工时，或者心态不对阻扰你行动时，此时有没有隐喻呢，=》思考的重要性，原本我只是想说明下打字的问题，谁知引出来隐喻
问题2：当然最重要的是，当你晚睡的时候，你有没有隐喻呢，
大家好，我是jesee腾飞，欢迎大家继续	跟我一起学习kubernetes快速入门课程，这是本系列课程的第九小节，在这小节内容当中，我们来简单说下，yaml部署文件的格式
yaml文件的格式，大家应该都有所了解了，我们之前在写docker的时候呢，就是dockerfile的那些格式，包括它怎么定义数组，怎么去缩进，这个今天我们就不讲了，
问题3：目标
我们主要呢，简单的来看下，这个kubernetes的部署yaml，它怎么去定义的，就是它有一个固定的kv的这些格式，这个是我们之前拿过来的一个例子，
问题4：整体上的认识要有，之前要么没有，要么没意识到有整体的概念=》每一个资源啊， 每一个资源分为一块，每一个资源它的定义，最开始有一个apiversion，=》先有一个整体的认识，再去看细节。
首先，它所有的这个定义，每一个资源啊， 每一个资源分为一块，每一个资源它的定义，最开始有一个apiversion，这是跟kubernetes的版本相关的， 一般大家去参考下，就是它官方的文档上每一个资源， 这个version是对应哪一个就可以了，
这个kind就是资源的名称，而每一个资源都会有一个对应的metadata，这个地方会有它的一些属性，
metadata和spec kind apiversion 最少这四个第一级别的，
至于它的metadata 里面怎么写，以及spec里面怎么写，有两种方式，
第一种当然是参考它的官方文档，那所有每一个对应的资源都会有解释，
另外一种方式就是我们可以用这个命令行kubectl explain中个方法来看下，比如说我们找到的是deployment  就输入kubectl explain deployment.metadata，这个时候呢，它就会把所有metadata下的这个参数都给你列出来， 比如说我们看第一个就是clustername呀，然后我们找找看，下面会有一个name的参数，解释在命名空间下，他必须是唯一的，
问题5：有问题，找答案，找资料，上google
另外一种解释就是我们可以找到一个这个中文的文档，google kubernetes deployment yaml 详解  
问题6：学习工具类的技巧=》心态+方式=》不要看到这么多的参数，就慌了，就觉得沮丧了，这心态不对，
问题7:慢慢你用着用着就熟悉了=>说明什么？先用起来，从最简单的开始用起来，慢慢就熟悉了，没必要一开始就把所有的都记下了，那负担有点大
一般这种情况下，我是建议，反正我呢，是没有去记和背这些东西的，通常情况下，我了解了大部分的结构，然后去copy一下，慢慢你用着用着就熟悉了，那这是一种方式，
另外呢，在整个yaml文件下，是可以定义多个资源的，像我们这个地方，但是在多个资源之间用3个杠 ---，来分割一下每一个资源，我们来看下就是我们定义的这个netcore的一个 部署一个资源文件，首先是所有的都需要一个apiversion 和它的kind 我们定义为service，metadata呢，基本上我们写个name，然后这个是他的spec，spec下面，type：nodeport，这个是service的类型，然后它的ports selector，
问题8：各种资源是如何联系的？如何交互的？
selector其实就是说我们这个service，我们要对应，maping就是映射的是哪个pod，我们再看下上面是我们的deployment定义，deployment它包含了我们的一个模板template，这个模板其实有我们的这个name，大家可以注意到 我们的这个name呢，就会被对应到service资源当中的这个selector下的这个name，所以我们会把这个service跟这个容器对应起来，当然这个下面会有一些containers，就是它的name images，它的端口ports，ports下面的这个containerport 就是它的容器端口号，下面是是它的一个策略，imagepullpolicy 就是什么情况下，会去下载最新的这个镜像， 我们在这个地方会有好几种方式，大家可以参考下文档，我们现在用的是always，不管是什么情况下，他都会去拉取最新的镜像，当然你默认不写镜像策略的话，你的image后面的value的值，不是最新版本的tag，它是不会下载最新的镜像的，包括deployment的spec下面会有一个replices，
这个东西呢，大家可以去就是copy就可以了，一般情况下，copy过来，改下镜像的名称和地址，然后把这相应的命名空间，改成你自己的就可以了，，
问题9：一般都有默认实现
那我们之前部署呢，没有加这个namespace，所以它默认就会被放到default的namespace下，会放到 也不一定是default，这个取决于你的集群会设置一个默认的命名空间如果当你的yaml文件不指定命名空间的时候，他就会使用哪个默认的命名空间，当然我们这个地方可以给它指定一个命名空间，比如说我们之前创建的一个叫做netcore，这样的一个命名空间，	 然后我们会把它放到每一个资源下，，之后我们再来执行以下 这个yaml文件，就是dashboard的yaml文件，这时命名空间已经为yaml文件当中指定的，我们就可以用命令查看下， kubectl get deploy -n netcore，
好这个就是我们用来 用yaml这个文件来 创建一个我们的服务的实例，hello-api，我们 还可以看下 kubectl get svc -n netcore 这个下面会给一个32370的端口，，我们之前在default命名空间下也创建一个实例，kubectl get svc，大家可以看下 这个命名空间下的hello-api会有一个31483的端口，，这两个端口，其实我们都可以访问到，127.0.0.1:31483/api/values，同时我们127.0.0.1:31370/api/values也是可以访问到的， 就是说这两个实例是同时存在的，
问题10:洞察力=>多套测试环境
也就是说在我们现在的node上面，它有四个实例，每一个命名空间下有两个，当然他们暴露出来的端口是不一样的，，我们可以使用这种方式来创建多套测试环境，你可以有不同命名空间下的，它相互之间是隔离的，，
好，这个就是我们简单给大家讲的一个yaml文件部署，
关于具体怎么去操作呢，大家其实更多时候，我觉得是可以去进行搜索的，，基本上你都能找到，
但是呢，在这个地方有一个叫kubernetes中文的一个文档，google kubernetes中文文档，大家也可以去看，这个文档介绍还是非常详细的，https://www.kubernetes.ort.cn/docs， 在这个地方你可以找到比如说我现在要看deployment这个东西，怎么去部署呢？在文档中，找到这个deployment，那他下面就会给你介绍了，，然后以及他的每一个参数，你都可以详细的看，
问题11:学习一个概念的东西时的技巧=》先知道它是干什么的，再去看细节
这个时候当你知道deploy干什么后，你再去看deploy的参数，就相对来说就比较好理解了，
好，这就是本节课，给大家讲的这个yaml文件的一个详解，
问题12：举例说明
我们也知道了就是 也对应看到了我们这个netcore这个yaml文件该如何去写，好，那么，当然这个netcore api创建我们是 这个镜像 大家可以看到它不是在本地，他需要从远程拿一个镜像， 我们是把这个镜像推到dockerhub上去了，我们下节课在把这点内容给补上，我们自己来创建一个netcore的api，同时把它推送到dockerhub上去，，好今天这个小节内容就到这里。


apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-demo
  namespace: netcore
  labels:
    name: k8s-demo
spec:
  replicas: 2
  selector:
    matchLabels:
      name: k8s-demo
  template:
    metadata:
      labels:
        name: k8s-demo
    spec:
      containers:
      - name: k8s-demo
        image: 	jessetalk/k8s-demo
        ports:
        - containerPort: 80
        imagePullPolicy: Always

---

kind: Service
apiVersion: v1
metadata:
  name: k8s-demo
  namespace: netcore
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
  selector:
    name: k8s-demo
