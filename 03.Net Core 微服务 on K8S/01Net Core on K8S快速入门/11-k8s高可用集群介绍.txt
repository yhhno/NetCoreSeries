此时发现一个问题，就是不太享受这个学习过程。
识别出自己之前的认识和腾飞的讲解有什么不同？ 找出他是如何得到这样的认识的？=》因为自己的认识和认识的方式有问题。
自己看到东西，基本上就是几个文字而已，顶多照着demo做一遍vs大白话它是什么?能干什么？ 内部机制流程是什么？
为什么听了他讲的后就很清楚，很明白，很容易理解呢？=》大白话，深入浅出，整体脉络都有，
第一次尝试不能慌，不能手足无措


0.乐趣所在，认真 等等积极东西
1.不心生恐惧     等等负面东西
2.罗列翻译，翻译翻译就是知道它的过程
3.对比，条理，概况，学习框架   等等技巧
4.做事总是不完整，缺乏了过程。=》积累就是过程的积累，是不可能偷懒的，一个名词就是一个过程，没有积累，你看到名词就是几个汉字，不知道其中的内容
5:要自己能分析出这个过程 如：微服务带来的好处=》这是一个怎样的过程呢？要自己能分析出这个过程
6.本质是什么？是开发过程？ 是单体时的开发过程和微服务时的开发过程，以及有了k8s之后，微服务的开发过程。
7.总结出一个学习方法，
8.对心态有了新的认识=》例如不要收视频时间等因素的干扰，心无旁骛的去干该干的事情
问题3：  clone_url = "http://localhost:8090/"=》一直都没有找到错误的关键，在其他的地方持续，重复的瞎徘徊，要么是信息错误，要么是网络问题=》对自己不清楚的情况，往往举手无措，不知道怎么办？也进不去思考分析的步骤，所以多了解=》文档啊，文档最清楚，可以让我们了解更多
问题3：如果我们直接看到这句话开启api server的本地监听端口，照做会有什么问题呢？=》我们不知道它是通过开启代理，来访问集群内部的服务 这个本质的。
问题0：翻译，能否自己独立看文档后翻译呢？
问题8：此时笔记本键盘带来的不适，影响学习进度=》有了问题就去解决，有了新情况就去适应
***********************************华丽的分割线************************************************
问题1：干什么事都是有方式方法的，任何优秀的人都是有自己的一套东西在推动的，如果能觉察到别人的方法，抽象出来，也是很有用的额，先模仿，再使用。=》不仅仅是技巧上，而且精神层面的也是必不可少的，第一重要。
问题2：看了如何阅读一本书后，就要对自己的阅读进行升级，=》之前只是一点一点的学，顺着一点一点理出个脉络，了解其中的过程，这是不够的。
问题2.2：看了科比的书之后，就要对自己的精神层面的东西进行升级，=》之前只是头疼医头脚疼医脚，局部，不整体，不系统，不全面，不过程，而现在有个活生生的例子，给你作参考。
问题1：你看你边看边听，没仔细听或者听的不清晰，都会导致你打字出错，最终反复返工=》你想想如果你人生道路，学习道路等，不清晰，不准确的话，那结果可想而知了，这个时候你就没有个隐喻来判断你对错了，你连纠正的想法都产生不了，你完了。=>思路延展，那你在其他的时候有没有一个隐喻呢，比如说你在把注意力放在看电视打游戏的时候，有没一个隐喻纠正你呢，比如你边听边打字的时候，重复返工时，或者心态不对阻扰你行动时，此时有没有隐喻呢，=》思考的重要性，原本我只是想说明下打字的问题，谁知引出来隐喻
问题2：概念的理解，工具的理解，对应不同知识具体要如何理解？详细理解的过程， 过程中的技巧
问题3：看到这些东西，只认识汉字，内在的都不了解，=》自己心态有可能失衡，想入手不知道怎么入手，
问题4：这个说明当时看到的时候，潜意识躲避了新东西。=》没有打破砂锅问到底的精神

这三个问题还是很经典的，很系统的（方向要对，心态要好，技巧要有）
问题1：学习新东西，最重要的是看文档，看官方文档，看经典文档，看大师的文档=》路子要选对
问题2：翻译，首先都是资源嘛，工具就是对资源的操作嘛
问题3：总结，抽象，对策=》对每种不同的东西有不同的对策，如工具类的，熟悉就好，概念类的就不同了。

问题1：简单的操作，基本的使用入手，然后要进行运行机制的深究。
问题2：论如何看一张图呢？
问题3：看到这些东西，只认识汉字，内在的都不了解，=》自己心态有可能失衡，想入手不知道怎么入手，
问题4：这个说明当时看到的时候，潜意识躲避了新东西。=》没有打破砂锅问到底的精神
问题5：论如何学习一个类似序列图的图？
问题6：我们追寻的就是一个个过程
问题7：高可用集群的出现及实现？

问题1：干什么事都是有方式方法的，任何优秀的人都是有自己的一套东西在推动的，如果能觉察到别人的方法，抽象出来，也是很有用的额，先模仿，再使用。=》不仅仅是技巧上，而且精神层面的也是必不可少的，第一重要。
问题1：做的事情，学习的东西等，要做到心中有数？=》那就是要有个概况，=》这也是个过程
1.k8s是什么？
2.它能够干什么呢？ 为什么如此的重要？
3.我们该如何来学习它？

但是，在这里呢，我们先简单把它分为6个步骤
1.先了解全貌和整体
2.对整体结构进入拆分，梳理脉络
3.马上开始行动
4.在行动的过程中逐步加深，每一阶段有阶段性目标
5.及时进行回顾与复盘，与理论相结合
6.输出

这个是我给大家推荐的一个k8s的这个学习路径
1.了解基本概念及核心组件
2.使用本地单节点集群来学习k8s
3.用kubectl与本地集群建立连接
4.部署服务到k8s集群
5.对k8s服务进行扩容，更新
6.进一步学习k8s资源（pod，deployment，service，statefulset，ingress。。。）
7.设计微服务
8.搭建k8s集群或者使用云服务商的k8s服务
9.添加持续集成，日志搜集，监控和指标度量。跟踪

我们会按照这样的步骤 
1.k8s集群基本概念
2.本地搭建k8s单节点集群
3.pod&service&deployment  
4.service的三种类型  
5.yaml部署文件语法初体验
6.初始化一个。net core api并push到docker hub
7.把net coreapi 部署到k8s
8.k8s集群高级概念  =》此步骤

大家好，我是jesee腾飞，欢迎你们来 继续跟我一起学习kubernetes快速入门系列的第十一小节，在这节课当中，我们会介绍一些更深入的东西，也就是我们在开始所讲的 
问题1：简单的操作，基本的使用入手，然后要进行运行机制的深究。
我们要介绍一下kubernetes集群的一些更深入的 更全面的剖析，
问题2：论如何看一张图呢？
那大家看到这张图呢， 首先就是这张图肯定是比较复杂的，那但是我们会一个个来讲，首先呢。就是说，一个集群肯定是分为多台的node，，这个node呢，它是工作节点，是worker，那左边呢其实是有一个master 的一个节点，在这个node当中呢， pod大家比较熟悉了，那有一个docker 有一个pod，对不对， 这个比较熟悉， docker上运行了很多的这个pod， 那在每一台node节点上，它还会有一个组件叫kubelet，kubelet呢，就是和一个proxy，，proxy是一个代理，kubelet主要是用来调度这个，它是具体来执行跟docker之间做交互，就是每一个节点上，它会装一个kubelet，有这个kubelet跟这个docker来负责每一个pod的创建，删除呀等等这些事情是由它kubelet来做的，那当然proxy呢，他其实是在外部service访问的时候，是有proxy做的一些访问，所以它是用来处理网络转发等等这一类的信息的，
我们再看左边这些东西呢， 基本上来说worker节点就比较简单些，每一台worker节点上有一个kubelet 有一个docker对不对， 然后由kubelet跟docker之间进行交互，来做一些pod 的删除创建等等这些事情， 那左边的这个master就相对复杂一点了， 我们看到我们的kubectl用户输入用户名 和密码，会有一个认证授权，那这个apis是由一个叫做controller manager这个东西，它所有的restful services是通过它暴露出去的，这也是在master上， 那所有的api呢，你看我们的kubectl通过认证授权之后，调用到restful的serivce api，那么你们还记得我们restfulapi 干了几件事情， 创建删除和修改这些资源对象对不对，那么这些资源对象我们之前说过我们是把他们当做一个数据库的表来做增删改查，也是可以这么来理解的，
那么在k8s这个master当中，它的数据是存在什么地方呢，所有的这些资源他存在什么地方，在整个集群当中，这些数据存储在什么地方，，这个就是由我们的etcd， 它是一个分布式的数据库存储来解决的，也就是说我们所有干的这个事情，create也好delete也好，还有包括整个集群当中，所有资源的一些状态，一些数据呢是存储在etcd里面的，它呢，会帮我们去存储到这个地方，也就是数据库，那api呢，直接跟etcd交互，
然后呢，在这个地方我们知道一下就是会有一个scheduler，这个scheduler就是专门来负责就是你的这个调度的，比如说你要创建一个pod，我把它存在etcd里面，etcd是不知道当前我应该创建在哪个node上的， 哪个node上的cpu负载还比较空我放到那边，他不知道， 而我们的scheduler知道，scheduler它就是负责来做这个资源调度的，他做好这个资源调度之后呢，，由它来负责去做分发，帮你去，就是知道你这个东西会创建在哪个node上，，
所以大致上来说整个过程是这样来分工的，，它的worker也好，master 也好， 就是包括它的数据存储， 大致分为这几个部分， 那我们再来详细看下这个这些核心组件的具体的功能，
1.etcd 保存了整个集群的状态；
2.api server 提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制；
3.controller manager 负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；
4.scheduler 负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上；
5.kubelet  负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理；
6.container runtime 负责镜像管理以及Pod和容器的真正运行（CRI）；
7.kube-proxy 负责为Service提供cluster内部的服务发现和负载均衡；
问题3：看到这些东西，只认识汉字，内在的都不了解，=》自己心态有可能失衡，想入手不知道怎么入手，
我们刚才说有etcd，保存的是整体集群的状态。=》深入理解背后的内涵
问题4：这个说明当时看到的时候，潜意识躲避了新东西。=》没有打破砂锅问到底的精神
我们在 如果通过docker下载的哪些镜像，我们可以看到 有了kube-proxy的镜像，对不对， 还有个kube-controller-manager 有个kube-scheduler 还有一个kube-apiserver，还有etcd 对不对，每一个组件他其实也是一个镜像下载下来，安装上去的，。我们这边看到有个kube-proxy的东西， 也就是我们刚才讲集群那个图时，中的proxy，它帮我们负责整个service的cluster的一些服务发现和负载均衡事情，
然后有一个container runtime runtime其实就是我们所讲的docker的这块内容，
然后呢，这个地方会有一个kubelet，它是负责维护这个 就是整个容器生命周期管理，它是具体干这个事情的，包括这个挂载（volume cvi）呀 网络（CNI）呀这些东西的管理】
scheduler 就是我们刚才说的负责调度
controller manager呢他会负责故障的检查呀，自动扩展，等等这些东西，
然后这个地方哟有一个apiserver，是所有资源操作的唯一入口，就是我们刚刚说的对外暴露一个api，当然它会提供一些授权机制，保证整个集群的安全，
etcd就是保存整个集群的状态
这些就是我们k8s的核心组件，
问题5：论如何学习一个类似序列图的图？
然后我们来看k8s的一个完整的调度过程。也就是说为什么我们通过kubectl create deployment之后，它能够帮我们把整个这个k8s容器当中的一些东西给创建起来，，他还是如何做到的？
问题6：我们追寻的就是一个个过程
我们来看下完整的一个过程
首先第一步呢，通过kubectl create deployment 创建了一个命令对不对，那他当然是发送到我们的api server，apiserver这个地方呢，它会去把它这个数据给保存起来，保存到我们的etcd当中，是不是，然后呢，他其实就结束了，就像我们访问api 其实发起了一个异步的请求，去做别的事，所以我们其实是可以立马得到返回结果的，当然它发生了一些验证，如果脚本有错误，它是会告诉你的，，因为他会有一些验证，
那验证通过之后呢，他其实会有一个通知，，这个通知会告诉给我们的controller manager（就是deploymenta通知deployment controller ），还记得吧，controller manager是负责具体调度的，controller manager 它其实会发起两个通知，一个是我们的replicasets，它是用来做副本管理的，就是用来告诉你，你到底应该有多少个副本，然后就是这个deployment controller 通知replicasets中的replicasetA，然后 replicaset下的replicasetA通知replicasetcontroller，replicasetcontroller知道后，再去创建pods中的pod，因为replicaset控制了你每个容器有多少个副本，，所以依次通过通知的方式，大家看到这些都是notification 用watch的这种状态去监控， deploymentcontroller它会去创建replicasets，replicasets通知replicasetcontroller，然后由replicasetcontroll来创建pods，，pods其实拿到这里之后呢，会有一个pod的资源过来，资源告诉scheduler，scheduler拿到这个消息之后呢，我来看下那个node比较空，然后他就分配到这个worker上，具体某一台node上去了，那分配过去之后呢，这个pod就会被，在这个worker上去执行，那谁去执行呢，是kubelet去执行，，kubelet告诉docker enginer，说我要创建几个containers，它的镜像是什么地址，它的版本是什么，以及创建几个副本， 由他来完成，
问题6：协同工作是什么？ 如何实现协同的？=》事件
所以这个是一个完整的kubectl create deployment执行的一个过程， 在这个过程当中呢， 我们看到k8s整个组件当中一些协同的工作，所以呢，整个数据呢也是保存在etcd中，那master这个node负责了大部分的调度啊，以及集群的一些中间的问题，所以它会分master节点和worker节点， 一旦master节点出现问题，你可能整个集群就挂了，你没有办法再去处理任何事情，所以对于k8s来说，一个高可用的集群是非常重要的，，我们现在还没有开始去掌握如何自己去搭建一套高可用的k8s集群，但是现在像阿里云，腾讯云，一般都会为我们提供好一整套的服务，当然我们也来看下，如果要去搭建一套这样的高可用k8s集群，我们如何来做，
问题7：高可用集群的出现及实现？
首先在这个地方我们需要有三台master节点， 一般你要做高可用的话是三台master节点，node节点你可以无数台，一直加，但是好像最多一个集群现在目前是支持255台，这个也是跟ip地址的范围限制有关的，那每一台master节点都有有etcd数据库，所以这就是为什么说大家要装集群的话，首先你要把三台master节点都并在一起啊， 然后都给他们装上etcd数据库，etcd呢就是会来负责整个 这个数据库他们之间会有同步嘛，会有选举算法，选举一个leader出来，然后他们之间数据会同步，，不管是通过那一台master，来去操作呢，他们数据都会进行同步，所以即使你两台master挂了，至少他还有一台它可以维持继续的工作，这个其实他们之间的数据是通过etcd来保持同步的， 同时每一台上面都会有一个apiserver，我们通过load balancer来去把这个api server给它挂起来，当然每一台master节点，都会有controllermanager和scheduler，所以这些组件是必须在master节点上去存在的，
好这是我们k8s高可用集群的参照，
我们对k8s更全面的剖析，就到这里了， 大家如果对于整个高可用集群，有兴趣呢，后面可以尝试自己搭建一下，本地去搭建下k8s集群，弄台虚拟机搞个3 4台node，去部署下，这个也是一个非常有挑战的任务
好，今天这节课就到这里结束了。
