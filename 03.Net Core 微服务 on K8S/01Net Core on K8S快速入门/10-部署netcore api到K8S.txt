此时发现一个问题，就是不太享受这个学习过程。
识别出自己之前的认识和腾飞的讲解有什么不同？ 找出他是如何得到这样的认识的？=》因为自己的认识和认识的方式有问题。
自己看到东西，基本上就是几个文字而已，顶多照着demo做一遍vs大白话它是什么?能干什么？ 内部机制流程是什么？
为什么听了他讲的后就很清楚，很明白，很容易理解呢？=》大白话，深入浅出，整体脉络都有，
第一次尝试不能慌，不能手足无措


0.乐趣所在，认真 等等积极东西
1.不心生恐惧     等等负面东西
2.罗列翻译，翻译翻译就是知道它的过程
3.对比，条理，概况，学习框架   等等技巧
4.做事总是不完整，缺乏了过程。=》积累就是过程的积累，是不可能偷懒的，一个名词就是一个过程，没有积累，你看到名词就是几个汉字，不知道其中的内容
5:要自己能分析出这个过程 如：微服务带来的好处=》这是一个怎样的过程呢？要自己能分析出这个过程
6.本质是什么？是开发过程？ 是单体时的开发过程和微服务时的开发过程，以及有了k8s之后，微服务的开发过程。
7.总结出一个学习方法，
8.对心态有了新的认识=》例如不要收视频时间等因素的干扰，心无旁骛的去干该干的事情
问题3：  clone_url = "http://localhost:8090/"=》一直都没有找到错误的关键，在其他的地方持续，重复的瞎徘徊，要么是信息错误，要么是网络问题=》对自己不清楚的情况，往往举手无措，不知道怎么办？也进不去思考分析的步骤，所以多了解=》文档啊，文档最清楚，可以让我们了解更多
问题3：如果我们直接看到这句话开启api server的本地监听端口，照做会有什么问题呢？=》我们不知道它是通过开启代理，来访问集群内部的服务 这个本质的。
问题0：翻译，能否自己独立看文档后翻译呢？
问题8：此时笔记本键盘带来的不适，影响学习进度=》有了问题就去解决，有了新情况就去适应
***********************************华丽的分割线************************************************
问题1：干什么事都是有方式方法的，任何优秀的人都是有自己的一套东西在推动的，如果能觉察到别人的方法，抽象出来，也是很有用的额，先模仿，再使用。=》不仅仅是技巧上，而且精神层面的也是必不可少的，第一重要。
问题2：看了如何阅读一本书后，就要对自己的阅读进行升级，=》之前只是一点一点的学，顺着一点一点理出个脉络，了解其中的过程，这是不够的。
问题2.2：看了科比的书之后，就要对自己的精神层面的东西进行升级，=》之前只是头疼医头脚疼医脚，局部，不整体，不系统，不全面，不过程，而现在有个活生生的例子，给你作参考。
问题1：你看你边看边听，没仔细听或者听的不清晰，都会导致你打字出错，最终反复返工=》你想想如果你人生道路，学习道路等，不清晰，不准确的话，那结果可想而知了，这个时候你就没有个隐喻来判断你对错了，你连纠正的想法都产生不了，你完了。=>思路延展，那你在其他的时候有没有一个隐喻呢，比如说你在把注意力放在看电视打游戏的时候，有没一个隐喻纠正你呢，比如你边听边打字的时候，重复返工时，或者心态不对阻扰你行动时，此时有没有隐喻呢，=》思考的重要性，原本我只是想说明下打字的问题，谁知引出来隐喻
问题2：概念的理解，工具的理解，对应不同知识具体要如何理解？详细理解的过程， 过程中的技巧

这三个问题还是很经典的，很系统的（方向要对，心态要好，技巧要有）
问题1：学习新东西，最重要的是看文档，看官方文档，看经典文档，看大师的文档=》路子要选对
问题2：翻译，首先都是资源嘛，工具就是对资源的操作嘛
问题3：总结，抽象，对策=》对每种不同的东西有不同的对策，如工具类的，熟悉就好，概念类的就不同了。



问题1：这也就是一个练习过程，实操性大，过程清楚，概念名词透。
问题2：vscode 命令行操作还记得不
问题3：随时，随地 每个步骤就要校验正确与否
问题3：也就是用我们的docker来部署下，=》要翻译的
问题4：有些东西是可以直接copy的，不用死记硬背的=>不同的东西，不同的策略
问题5：dockerhub 翻译，
问题7； 各个参数要了解。

问题1：干什么事都是有方式方法的，任何优秀的人都是有自己的一套东西在推动的，如果能觉察到别人的方法，抽象出来，也是很有用的额，先模仿，再使用。=》不仅仅是技巧上，而且精神层面的也是必不可少的，第一重要。
问题1：做的事情，学习的东西等，要做到心中有数？=》那就是要有个概况，=》这也是个过程
1.k8s是什么？
2.它能够干什么呢？ 为什么如此的重要？
3.我们该如何来学习它？

但是，在这里呢，我们先简单把它分为6个步骤
1.先了解全貌和整体
2.对整体结构进入拆分，梳理脉络
3.马上开始行动
4.在行动的过程中逐步加深，每一阶段有阶段性目标
5.及时进行回顾与复盘，与理论相结合
6.输出

这个是我给大家推荐的一个k8s的这个学习路径
1.了解基本概念及核心组件
2.使用本地单节点集群来学习k8s
3.用kubectl与本地集群建立连接
4.部署服务到k8s集群
5.对k8s服务进行扩容，更新
6.进一步学习k8s资源（pod，deployment，service，statefulset，ingress。。。）
7.设计微服务
8.搭建k8s集群或者使用云服务商的k8s服务
9.添加持续集成，日志搜集，监控和指标度量。跟踪

我们会按照这样的步骤 
1.k8s集群基本概念
2.本地搭建k8s单节点集群
3.pod&service&deployment  
4.service的三种类型  
5.yaml部署文件语法初体验
6.初始化一个。net core api并push到docker hub=》此步骤
7.把net coreapi 部署到k8s
8.k8s集群高级概念

大家好，我是jesee腾飞，欢迎你们继续跟我一起来学些kubernetes快速入门课程，这个是本系列课程第十小节，
问题1：这也就是一个练习过程，实操性大，过程清楚，概念名词透。
好，这一小节我们来部署下net core api到k8s
之前其实我们已经部署过了一次了，但是这一次我们需要完成中间的一些小小的步骤，
我们需要创建一个net core api项目
问题2：vscode 命令行操作还记得不
命令行方式
dotnet new webapi --name K8sDemo，
它会创建一个net core api 空的项目
cd K8sDemo
dir
code .  然后用vs code 打开这个项目，
打开之后呢，有一个valuesController
我们来改造下
     // GET api/values/5
        [HttpGet("{id}")]
        public string Get(int id)
        {
            //return "value";
            return id.ToString();
        }
问题3：随时，随地 每个步骤就要校验正确与否
然后 dotnet run  启动项目，看下它是不是能work，本地如果能work的话，我们就会给它加一个dockerfile，然后把它打包成一个镜像
浏览器输入 localhost:5001/api/values,报错  是https的问题，因为我们没有用https
然后继续访问， 正常访问，
本地是可以访问的， localhost:5001/api/values/2
问题3：也就是用我们的docker来部署下，=》要翻译的
本地成功之后呢，我们需要给他打一个包， 也就是用我们的docker来部署下，，我们找下我们之前的dockerfile,复制一下。 因为docker的内容，我们先前在微服务实战课程的第二章已经讲过了。所以我们在这里就简单的复制一下它的dockerfile，
其实这个dockerfile，我们输入dotnet core2.0.1的话，官方 还有很多地方都是可以找的到，
在此项目中，我们新建一个dockerfile文件 在vscode中直接新建 输入Dockerfile就可以了，不用输入扩展名，
然后再把之前的dockerfile内容copy过来，
当然我们要改下我们的这个程序集名称 K8sDemo
问题4：有些东西是可以直接copy的，不用死记硬背的=>不同的东西，不同的策略
好，这就是我们的dockerfile 完成了， 其他地方不用改，就可以了额，
然后它会暴露到80端口，
这个时候 docker build -t jeseetalk/K8sDemo . 版本号就不输了,也可以jeseetalk/K8sDemo：V1 后面的. 是在指定目录下build，此处是在当前目录下build
 我们就会看到它build  我们的这个Docker镜像，

 问题3：随时，随地 每个步骤就要校验正确与否
 当然build完之后，我们尝试下在本地去启动下，看它是否能work，如果能work的话，我们就会把它推送到dockerhub上去，
 问题5：dockerhub 翻译，
 dockerhub呢，因为相当于它是一个远程的仓库， 是有docker提供给我们的，，所以我们不需要去部署一个镜像的仓库，如果没有它的话，我们是需要自己来部署的，，当然在dockerhub上你需要有一个账号密码。登录进来，可以上传自己的镜像，也可以pull自己上传的镜像，
 当本地build成功后，我们用docker images 来看下 有一个jeseetalk/K8sDemo的镜像，它的版本是latest，
 然后本地启动下这个容器，docker run -d -p 8085：80 --name  k8sdemo jeseetalk/K8sDemo 
 它就运行成功了，
 然后我们 docker ps 看下 本地有个k8sdemo 运行在8085上
 所以我们在本地访问下localhost：8085/api/values 成功   这就是我们用容器跑出来的net core api项目
 我们现在很简单，我们要把它推送到dockerhub上去
 我们需要登录一下，docker login hub.docker.com
 输入用户名 密码
 或者docker  login --username jeseetalk
 然后输入密码
 密码正确的话，会输出 login successed
 登录成功后，我们就可以把它推送过去。
 docker push jeseeta/K8sDemo
 就会把本地的镜像推送到dockerhub上去，之后就可以通过这个docker pull来把这个镜像拉取下来，，我应该是设置的是一个公共的地址。

 然后呢，我们需要在创建一个k8s的一个deploy文件 
 新建 deploy.yaml 带扩展名，
 这个yaml文件呢，我们需要创建两个东西，一个是deployment ，另外一个是service来做绑定的，我们也是可以从原先的地方copy一份过来，
 命名空间还是用netcore  但是name要修改为K8sDemo



 问题7； 各个参数要了解。
 apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-demo  deployment的名称
  namespace: netcore
  labels:
    name: k8s-demo 映射用的
spec:
  replicas: 2
  selector:
    matchLabels:
      name: k8s-demo 这个是replicas的name，这个地方分两段一段是它的template模板，模板下定义了containers信息，这个replicas就是说你的副本 你会把这个名字叫k8sdemo这个pod呢部署两份，，它是这样的一个意思，


  template:
    metadata:
      labels:
        name: k8s-demo
    spec:
      containers:
      - name: k8s-demo  容器名称
        image: 	jessetalk/k8s-demo
        ports:
        - containerPort: 80
        imagePullPolicy: Always


kind: Service
apiVersion: v1
metadata:
  name: k8s-demo  是serivce的名称
  namespace: netcore
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
  selector:
    name: k8s-demo 是我要绑定到那个pod上


这样说，我们基本上就没有什么问题了，最后把这个containers中的images给改下，
这样之后，我们就可以快速的部署一下，我们的这个k8sdemo 到我们的kubernetes上去，
kubectl create -f deploy.yaml
我们来看下这个deployment和service 都已经创建好了。
问题3：随时，随地 每个步骤就要校验正确与否
所以我们来看下，kubectl get svd -n netcore
这个地方就会出现 k8sdemo这个service，它呢是30866端口，所以我们可以通过localhost：30866/api/values  来访问这个本地k8s这个服务
所以这样我们就全部部署到k8s上去了，同时呢， 我们依旧可以通过这个dashboard来看下，，通过我们这个dashboar来看下，我们本地的这个部署上去的容器和我们的服务
因为dashboard不是通过nodeport方式部署的，所以我们要启动下 kubectl proxy，
然后通过地址的方式来访问我们的dashboard，
切换到netcore 命名空间下， 可以看到我们得两个部署，四个容器组，每一个deployment是有两个容器组的，同时呢，我们可以在这里进入到这个容器，看到我们的日志，甚至呢，可以用termal 运行进去，看到我们的这个 ls 看到所有的文件，同时做一些更改，这个是其实都是跟进入到docker容器是一样的，

好到这里呢，我们就已经把 通过yaml部署netcore api，部署到k8s上，任务给完成了。，不知道你自己能不能完成这个过程呢。
