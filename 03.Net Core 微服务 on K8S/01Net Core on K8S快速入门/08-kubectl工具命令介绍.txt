此时发现一个问题，就是不太享受这个学习过程。
识别出自己之前的认识和腾飞的讲解有什么不同？ 找出他是如何得到这样的认识的？=》因为自己的认识和认识的方式有问题。
自己看到东西，基本上就是几个文字而已，顶多照着demo做一遍vs大白话它是什么?能干什么？ 内部机制流程是什么？
为什么听了他讲的后就很清楚，很明白，很容易理解呢？=》大白话，深入浅出，整体脉络都有，
第一次尝试不能慌，不能手足无措


0.乐趣所在，认真 等等积极东西
1.不心生恐惧     等等负面东西
2.罗列翻译，翻译翻译就是知道它的过程
3.对比，条理，概况，学习框架   等等技巧
4.做事总是不完整，缺乏了过程。=》积累就是过程的积累，是不可能偷懒的，一个名词就是一个过程，没有积累，你看到名词就是几个汉字，不知道其中的内容
5:要自己能分析出这个过程 如：微服务带来的好处=》这是一个怎样的过程呢？要自己能分析出这个过程
6.本质是什么？是开发过程？ 是单体时的开发过程和微服务时的开发过程，以及有了k8s之后，微服务的开发过程。
7.总结出一个学习方法，
8.对心态有了新的认识=》例如不要收视频时间等因素的干扰，心无旁骛的去干该干的事情
问题3：  clone_url = "http://localhost:8090/"=》一直都没有找到错误的关键，在其他的地方持续，重复的瞎徘徊，要么是信息错误，要么是网络问题=》对自己不清楚的情况，往往举手无措，不知道怎么办？也进不去思考分析的步骤，所以多了解=》文档啊，文档最清楚，可以让我们了解更多
问题3：如果我们直接看到这句话开启api server的本地监听端口，照做会有什么问题呢？=》我们不知道它是通过开启代理，来访问集群内部的服务 这个本质的。
问题0：翻译，能否自己独立看文档后翻译呢？
问题8：此时笔记本键盘带来的不适，影响学习进度=》有了问题就去解决，有了新情况就去适应
***********************************华丽的分割线************************************************
问题1：干什么事都是有方式方法的，任何优秀的人都是有自己的一套东西在推动的，如果能觉察到别人的方法，抽象出来，也是很有用的额，先模仿，再使用。=》不仅仅是技巧上，而且精神层面的也是必不可少的，第一重要。
问题2：看了如何阅读一本书后，就要对自己的阅读进行升级，=》之前只是一点一点的学，顺着一点一点理出个脉络，了解其中的过程，这是不够的。
问题2.2：看了科比的书之后，就要对自己的精神层面的东西进行升级，=》之前只是头疼医头脚疼医脚，局部，不整体，不系统，不全面，不过程，而现在有个活生生的例子，给你作参考。



问题1：学习新东西，最重要的是看文档，看官方文档，看经典文档，看大师的文档=》路子要选对
问题2：翻译，首先都是资源嘛，工具就是对资源的操作嘛问题3：总结，抽象，对策=》对每种不同的东西有不同的对策，如工具类的，熟悉就好，概念类的就不同了。

问题1：干什么事都是有方式方法的，任何优秀的人都是有自己的一套东西在推动的，如果能觉察到别人的方法，抽象出来，也是很有用的额，先模仿，再使用。=》不仅仅是技巧上，而且精神层面的也是必不可少的，第一重要。
问题1：做的事情，学习的东西等，要做到心中有数？=》那就是要有个概况，=》这也是个过程
1.k8s是什么？
2.它能够干什么呢？ 为什么如此的重要？
3.我们该如何来学习它？

但是，在这里呢，我们先简单把它分为6个步骤
1.先了解全貌和整体
2.对整体结构进入拆分，梳理脉络
3.马上开始行动
4.在行动的过程中逐步加深，每一阶段有阶段性目标
5.及时进行回顾与复盘，与理论相结合
6.输出

这个是我给大家推荐的一个k8s的这个学习路径
1.了解基本概念及核心组件
2.使用本地单节点集群来学习k8s
3.用kubectl与本地集群建立连接
4.部署服务到k8s集群
5.对k8s服务进行扩容，更新
6.进一步学习k8s资源（pod，deployment，service，statefulset，ingress。。。）
7.设计微服务
8.搭建k8s集群或者使用云服务商的k8s服务
9.添加持续集成，日志搜集，监控和指标度量。跟踪

我们会按照这样的步骤 
1.k8s集群基本概念
2.本地搭建k8s单节点集群
3.pod&service&deployment  
4.service的三种类型  =》此步骤
5.yaml部署文件语法初体验
6.初始化一个。net core api并push到docker hub
7.把net coreapi 部署到k8s
8.k8s集群高级概念


大家好，我是jesee腾飞，欢迎大家一起，跟我继续学习kubernetes的快速入门课程，那么这是本系列的第8小节，在第8小节当中呢，我们会给大家简单介绍kubectl，因为在这之前我们已经进行了简单的使用，但是kubectl有些命令呢，，我们来总体的来讲下，
问题1：学习新东西，最重要的是看文档，看官方文档，看经典文档，看大师的文档=》路子要选对
这边给大家提供一个文章，
https://jimmysong.io/kubernetes-handbook/guide/kubectl-cheatsheet.html基本上来说，jimmy也是国内在kubernetes上早期非常活跃的一个，就是写了很多的文章， 大家可以在这些文章上有些简单的了解，和深入的学习，这个文档地址，我会放到话题的里面，有一些资料大家可以在话题里去看，包括之前docker创建的一些文档也在这里， 问题2：翻译，首先都是资源嘛，工具就是对资源的操作嘛这个我简单说下，kubectl就是一个命令工具， 那对于他来讲呢，我们首先知道我们有三大资源， 有pod service deploy，它有一些关键字叫get 来查询资源， get后加资源的名称，如services pods deployment就可以了，非常方便， 当然它后面会带有一些详细的参数，比如说之前用的 -n +命名空间名称，它这里还可以输入 --all-namespace，当然这个是对单个资源（单个资源如何理解）如pod service deploy 通过命令行方式的查找那我们如何来创建资源呢，文档上有，创建对象有几种方式，第一种当然是我们写一个yaml的文件，用create -f 文件地址，的方式 你也可以传入多个yaml文件， 当然你也可以指定一个文件夹， 这个文件夹下的所有yaml文件都会被执行，，这个是创建对象的一种方式，当然有些资源呢，可以不用yaml文件也可以创建，比如namespacekubectl get namespace我们来创建一个kubectl create namespace netcore然后在查询下，kubectl get namespace 我们看到netcore已经创建好了，那接下来我们就可以把pod service deploy创建在这个namespace下，不同的namespace下，它的资源是相互隔离的，我们看了创建 查询之后， 这个地方还有更新，更新的方式我们可以用 replace 强制替换，这个地方还有rolling-update就是滚动更新，它会确保你的 后面的更新 新增的这个，它会重新去创建，相当于  虽然是update 但是它相当于是会把你新创建一个资源，然后当你这个资源创建成功后，再替换原来的资源， 这种方式来去做更新，下面还有修补资源，编辑资源  scale资源（扩展资源）就是对我们的deploy进行replice，就是你快速从一个实例扩展到好几个实例，下面是删除问题3：总结，抽象，对策=》对每种不同的东西有不同的对策，如工具类的，熟悉就好，概念类的就不同了。大家注意到其实都是kubectl 用delete的方式加资源的名称 这个就是我们典型的restful的一个用法，，所以我们说所有的这个kubernetes它的组件就是资源，资源呢，每一个资源呢，对应的都有get create delete这几种方法， 大家可以参考这种方式来进行演练就可以了，所以我们最终的就是要理解每一种资源它的意义，他资源存在的目的是什么，接下来我们要去理解后面的一些东西，相对来说就会更简单了，这节课我们kubectl就讲这么多，非常简单，希望大家手动去实践一下，这些命令行，不用去记， 你忘记了查下，基本上来说就非常简单，并且它非常的有规律，