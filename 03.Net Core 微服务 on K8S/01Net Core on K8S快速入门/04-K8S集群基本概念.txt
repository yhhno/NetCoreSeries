此时发现一个问题，就是不太享受这个学习过程。
识别出自己之前的认识和腾飞的讲解有什么不同？ 找出他是如何得到这样的认识的？=》因为自己的认识和认识的方式有问题。
自己看到东西，基本上就是几个文字而已，顶多照着demo做一遍vs大白话它是什么?能干什么？ 内部机制流程是什么？
为什么听了他讲的后就很清楚，很明白，很容易理解呢？=》大白话，深入浅出，整体脉络都有，

0.乐趣所在，认真 等等积极东西
1.不心生恐惧     等等负面东西
2.罗列翻译，翻译翻译就是知道它的过程
3.对比，条理，概况，学习框架   等等技巧
4.做事总是不完整，缺乏了过程。=》积累就是过程的积累，是不可能偷懒的，一个名词就是一个过程，没有积累，你看到名词就是几个汉字，不知道其中的内容
5:要自己能分析出这个过程 如：微服务带来的好处=》这是一个怎样的过程呢？要自己能分析出这个过程
6.本质是什么？是开发过程？ 是单体时的开发过程和微服务时的开发过程，以及有了k8s之后，微服务的开发过程。
7.总结出一个学习方法，

问题0：动手其实就是一个很快速的掌握细节部分的一个手段
问题1：有个步骤是不是就把过程基本给确定下来了
问题1.1 翻译，vs自己能否也能做到像他这样的解释呢？
问题1.2 要对单节点敏感
问题3：打成镜像，遇到这个时候，心里会怎样想？慌慌的，因为不知道是指什么？是怎样的一个过程
问题2：这是一个怎样的过程?能否复述一遍。进而以后借鉴呢？
问题8：自己能够做出这样的划分呢？
问题4：集群之间的的状态和维护vs之前就是通过一个负载平衡器连多个机器，和redis自带的集群功能=》根本就没抽象出 状态和维护
问题5：值的注意的点：它的集群是如何讲的？它的集群高可用时架构有啥不一样？ 
问题5.1之前的集群认识是slave机器复制master机器的数据，现在可不是？ 要弄明白它的机制
问题6:如果自己去理解资源，能够做到它这样的认识呢？
问题7：自己在学习的时候，能否有这样的做了减法的认识呢？ 举个简单而又能体现本质的例子呢？
问题9：这是怎样的一个概念？ 有什么好处呢？ =》对集群 node 资源 kubectl的有了简单的认识，这就是概念


问题1：做的事情，学习的东西等，要做到心中有数？=》那就是要有个概况，=》这也是个过程
1.k8s是什么？
2.它能够干什么呢？ 为什么如此的重要？
3.我们该如何来学习它？

但是，在这里呢，我们先简单把它分为6个步骤
1.先了解全貌和整体
2.对整体结构进入拆分，梳理脉络
3.马上开始行动
4.在行动的过程中逐步加深，每一阶段有阶段性目标
5.及时进行回顾与复盘，与理论相结合
6.输出

这个是我给大家推荐的一个k8s的这个学习路径
1.了解基本概念及核心组件
2.使用本地单节点集群来学习k8s
3.用kubectl与本地集群建立连接
4.部署服务到k8s集群
5.对k8s服务进行扩容，更新
6.进一步学习k8s资源（pod，deployment，service，statefulset，ingress。。。）
7.设计微服务
8.搭建k8s集群或者使用云服务商的k8s服务
9.添加持续集成，日志搜集，监控和指标度量。跟踪

大家好，我是jesee 腾飞，欢迎大家继续跟我一起学习kubernetes快速入门的第四小节课
问题0：动手其实就是一个很快速的掌握细节部分的一个手段
在第四小节的时候呢，我们会开始进入动手的环节，
问题1：有个步骤是不是就把过程基本给确定下来了
我们会按照这样的步骤
1.k8s集群基本概念
2.本地搭建k8s单节点集群
3.pod&service&deployment
4.service的三种类型
5.yaml部署文件语法初体验
6.初始化一个。net core api并push到docker hub
7.把net coreapi 部署到k8s
8.k8s集群高级概念
问题1.1 翻译，vs自己能否也能做到像他这样的解释呢？
第一步呢，我们会简单说下k8s集群的基本概念
问题1.2 要对单节点敏感
然后接下来我们就开始搭建本地集群，当然是单节点的，并非是一个集群
搭建完集群之后呢，我们回来再讲下pod service  deployment 就是k8s三大组件的概念 说一下
说完之后呢，其实因为中间的service，它复杂度会 因为他有三种类型，我们需要区分下，所以我们会把这个service单独拎出来讲下，
讲完之后，我们会来初步的讲解这个k8s 这个yaml部署文件 这个语法结构
有了它之后，我们才可以进行后面的这个部署
在部署的时候，我们分两步，
问题3：打成镜像，遇到这个时候，心里会怎样想？慌慌的，因为不知道是指什么？是怎样的一个过程
第一步我们先初始化一个。net core api然后把它打成docker镜像
打成docker镜像之后，把它push到远程
然后通过我们在第五步写的yaml文件，把它部署到k8s集群上，
问题2：这是一个怎样的过程?能否复述一遍。进而以后借鉴呢？
这就是一个全部的过程
讲完这个过程之后呢，最后我们会把这个k8s集群再深入的剖析下，因为在最开始的时候，我只给大家讲一个很简单的概念，方便大家去理解，因为我们在整个调查下来的话，很多同学还是不太清楚k8s，只是有些简单的认识，所以我们把这个高级的概念的剖析放到最后，

我们先来简单看下k8s集群部分=》对应步骤一
问题8：自己能够做出这样的划分呢？
我们分为四个部分来讲
1.集群
2.node（master and worker）
3。资源
4.kubectl
问题4：集群之间的的状态和维护vs之前就是通过一个负载平衡器连多个机器，和redis自带的集群功能=》根本就没抽象出 状态和维护
第一个集群，大家比较容易理解，就是很多机器，就是我们把很多机器拼在一起，组成一个集群，这个集群之间内部其实是有一些状态，维护呀等等这些之类的，就是所有的 集群有一个处理能力 他们是放在一起处理的，这样的一个概念，比较好理解，
问题5：值的注意的点：它的集群是如何讲的？它的集群高可用时架构有啥不一样？ 
问题5.1之前的集群认识是slave机器复制master机器的数据，现在可不是？ 要弄明白它的机制
那这个集群是由我们的k8s 它有两个部分，一部分是  就是node节点分为master节点和worker节点，master节点和worker节点 worker节点主要是用来去做处理，而master节点使用来维护这个集群的状态，这两个部分呢其实是有一些，有一些集群部署的时候呢，会把master和worker放到一起，这也不是不可以，就是说 当然我们在做高可用的时候，架构会不一样，这个集群和node之间，其实跟很多我们的其他的一些 比如说es集群还有等等一些集群的概念是差不多的， 所以我们就不过多的讲了，当然我们在做深入剖析的时候，会把它的整个master worker节点之间怎么样去调度的，他到底哪些集群状态， 再回过头去讲，
问题6:如果自己去理解资源，能够做到它这样的认识呢？
那其中比较重要的一个部分是资源，为什么叫资源呢、其实因为k8s它整个设计架构上来讲，它所有内部的一些组件，其实每个组件开放出来的是一个资源，并且呢，对外暴露的是这个restful的api，，所以我们所有对组件的操作，其实是可以通过api完成的，而yaml文件呢，其实他这个配置其实，也最终通过restful api去进行执行的，
那kubectl呢，其实是一个本地的客户端，这个客户端呢，我就是一个命令行工具，可以让我们连接到我们的一个k8s集群，通过kubectl输入命令，来跟远程的集群进行交互 
我们来稍微看下图示，就是说kubectl呢 我们在本地 命令行，输入命令，之后呢它会访问到这个k8s集群api，通过api呢，由master上 来进行操作node节点，去进行这个实践的部署。
所以我们 刚刚说这个资源，所以kubebtl干的所有事情，包括我们通过它来操作k8s集群，其实都是通过命令来操作master，通过命令来操作集群，干的所有事情，其实都是  大家都知道我们的restful api 分为这个create delete update这几种方法， kubectl很简单，就是它暴露给我么一些，也是暴露给我们这样一些方法， create delete update这些方法啊，而对应的 就是针对每一个资源来进行这个增删改查动作，所以大家不要把这个k8s想的很复杂，其实它就是干了这么简单的事情， 我们可以理解它就是干了这么简单的事情， 我就通过kubectl操作这些资源，对这些资源进行创建 修改 删除其实就可以了，
问题7：自己在学习的时候，能否有这样的做了减法的认识呢？ 举个简单而又能体现本质的例子呢？
跟我们调用api操作数据库 增删改查没有什么太大的区别， 从这个点上来讲，所以这样大家其实更好理解， 我们只需要理解他到底有哪些资源，每个资源代表什么意思，然后我们通过kubectl，可以去创建他们，通过这样来理解其实就可以了，
问题9：这是怎样的一个概念？ 有什么好处呢？ =》对集群 node 资源 kubectl的有了简单的认识，这就是概念
好，我们有这样的一个简单概念之后呢，我们其实接下来需要在我们本地去创建一个这样的集群 本地的单节点集群，通过kubectl跟他进行这个交互，然后去创建这些资源
好，下节课，我们就来敢这样的事情。
