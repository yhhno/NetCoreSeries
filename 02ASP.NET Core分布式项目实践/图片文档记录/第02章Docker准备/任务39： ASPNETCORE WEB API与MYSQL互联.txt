上节课做了EFcore webapi 去连了容器内的mysql   读了数据 
本节课把mysql和 webapi给连起来
这个地方就是两个容器互联
我们有一个host 上面有一个webapi的容器 今天要做的事情是不是单容器，是多个容器，host上还有一个mysql的容器  webapi默认跑的是5000的端口，  我们把webapi打了镜像之后，可以让它跑在80端口，host上为8081端口，而mysql都是3306端口
容器互联有两种方式 
link 被docker判定为过期的  后面主要用的network方式
我们首先用的方式是 link
首先我们需要做的事情是webapi给制作成一个镜像


没有mysql容器 ，不用慌，之前的代码copy过来就好了，简单 命令搞完了还要搞权限
docker exec -it mysql01 bash
mysql -uroot -p

GRANT ALL PRIVILEGES ON *.* to 'jesse'@'%'
WITH GRANT OPTION;

先把webapi 给打包了
新建一个Dockerfile文件，添加DockerFile 包
用到两个镜像
microsoft/aspnetcore-build  用来build 就是发布
microsoft/aspnetcore  runtime运行时
先build ，然后把代码发到运行时上去

dockerfile内容为
FROM microsoft/aspnetcore-build as build-env
WORKDIR /code
COPY *.csproj ./
RUN dotnet restore
COPY . ./
RUN dotnet publish -c Release -o out

FROM microsoft/aspnetcore
WORKDIR /app
COPY --from=build-env /code/out ./
EXPOSE 80
#RUN dotnet User.API.dll
ENTRYPOINT ["dotnet","User.API.dll"]

build之后没有出现image怎么回事，
因为我们的dockerfile写错了，  我们写了run 此时应该是Entrypoint 是它的一个入口，告诉他们入口   是容器运行的时候再执行它，而不是在这里直接就运行了
SO,初始数据库操作不用注销，因为打包是不运行呀

接下来
    public static IWebHost BuildWebHost(string[] args) =>
            WebHost.CreateDefaultBuilder(args)
                .UseStartup<Startup>()
            .UseUrls("http://+:80")
                .Build();


等下会起一个网络 server不在是localhost 改成db 
在生产上用db 开发用localhost

我们来打一下镜像
cd D:\src\NetCoreDemo\NetCore集合\02ASP.NET Core分布式项目实践\02Docker\dockerbuild\User.API
docker build -t jesse/aspnetcore:prod .


D:\src\NetCoreDemo\NetCore集合\02ASP.NET Core分布式项目实践\02Docker\dockerbuild\User.API>docker build -t jesse/aspnetcore:prod .
Sending build context to Docker daemon  1.191MB
Step 1/11 : FROM microsoft/aspnetcore-build as build-env
latest: Pulling from microsoft/aspnetcore-build
c73ab1c6897b: Pull complete
1ab373b3deae: Pull complete
b542772b4177: Pull complete
57c8de432dbe: Pull complete
2dcfad73ac06: Pull complete
cd5eebddacdc: Pull complete
cac0928816fb: Pull complete
c26ab2e846ff: Pull complete
a0656e0b1778: Pull complete
4bb101761ae8: Pull complete
Digest: sha256:a6f0bcf6d50b9e82a3abb07e14e4bcc47f98f60d4c75016e5a37910913a943bc
Status: Downloaded newer image for microsoft/aspnetcore-build:latest
 ---> 07a8942b8afb
Step 2/11 : WORKDIR /code
Removing intermediate container 420fac7edc63
 ---> 880e412b74e9
Step 3/11 : COPY *.csproj ./
 ---> 02280fe69f71
Step 4/11 : RUN dotnet restore
 ---> Running in 1d7dfef5728d
  Restoring packages for /code/User.API.csproj...
  Restoring packages for /code/User.API.csproj...
  Restore completed in 969.53 ms for /code/User.API.csproj.
  Installing Microsoft.Extensions.Logging.Abstractions 2.0.0.
  Installing Microsoft.Extensions.Caching.Abstractions 2.0.0.
  Installing Microsoft.Extensions.Options 2.0.0.
  Installing Microsoft.Extensions.Logging 2.0.0.
  Installing Microsoft.Extensions.Caching.Memory 2.0.0.
  Installing System.Security.Cryptography.ProtectedData 4.4.0.
  Installing Microsoft.EntityFrameworkCore 2.0.1.
  Installing Microsoft.Extensions.Configuration.Abstractions 2.0.0.
  Installing System.Configuration.ConfigurationManager 4.4.0.
  Installing System.Security.Permissions 4.4.0.
  Installing Google.Protobuf 3.5.1.
  Installing Microsoft.EntityFrameworkCore.Relational 2.0.1.
  Installing MySql.Data 8.0.11.
  Installing MySql.Data.EntityFrameworkCore 8.0.11.
  Installing Microsoft.AspNetCore.All 2.0.6.
  Generating MSBuild file /code/obj/User.API.csproj.nuget.g.props.
  Generating MSBuild file /code/obj/User.API.csproj.nuget.g.targets.
  Restore completed in 9.3 sec for /code/User.API.csproj.
Removing intermediate container 1d7dfef5728d
 ---> e94ca9e88d64
Step 5/11 : COPY . ./
 ---> 74b913740413
Step 6/11 : RUN dotnet publish -c Release -o out
 ---> Running in f6a67bd5f7d4
Microsoft (R) Build Engine version 15.6.84.34536 for .NET Core
Copyright (C) Microsoft Corporation. All rights reserved.

  Restoring packages for /code/User.API.csproj...
  Restore completed in 89.93 ms for /code/User.API.csproj.
  Generating MSBuild file /code/obj/User.API.csproj.nuget.g.props.
  Generating MSBuild file /code/obj/User.API.csproj.nuget.g.targets.
  Restore completed in 2.42 sec for /code/User.API.csproj.
  User.API -> /code/bin/Release/netcoreapp2.0/User.API.dll
  User.API -> /code/out/
Removing intermediate container f6a67bd5f7d4
 ---> 73f7929090f9
Step 7/11 : FROM microsoft/aspnetcore
latest: Pulling from microsoft/aspnetcore
c73ab1c6897b: Already exists
a2cd40faad8a: Pull complete
39f0dbd18e5c: Pull complete
99871c3b130a: Pull complete
dba781b02c4e: Pull complete
Digest: sha256:fbd70bd0ac16905640e43cdc2d93cd5ee3321e1ed66f7b7dd61a2d4055066b4b
Status: Downloaded newer image for microsoft/aspnetcore:latest
 ---> c4ca78cf9dca
Step 8/11 : WORKDIR /app
Removing intermediate container 4bd08f1fce84
 ---> b72aaf9a3584
Step 9/11 : COPY --from=build-env /code/out ./
 ---> bf0f4e42af5a
Step 10/11 : EXPOSE 80
 ---> Running in fefecadbd5b9
Removing intermediate container fefecadbd5b9
 ---> e61cde664542
Step 11/11 : ENTRYPOINT ["dotnet","User.API.dll"]
 ---> Running in ab923aaee534
Removing intermediate container ab923aaee534
 ---> 9fc872ae490a
Successfully built 9fc872ae490a
Successfully tagged jesse/aspnetcore:prod
SECURITY WARNING: You are building a Docker image from Windows against a non-Windows Docker host. All files and directories added to build context will have '-rwxr-xr-x' permissions. It is recommended to double check and reset permissions for sensitive files and directories.



共有11步 在dockerfile进行build的时候每一条命令 有一个层出来 就是docker镜像  这个层级概念 后面更细的去了解这个概念

db是个潜在的bug
这个时候它打镜像的时候，使用了run，所以就会运行，数据库初始化，但此时数据库连接字符串是db  此时是没有的


运行镜像
docker run -d -p 8002:80 --name aspnetcore --link mysql01:db jesse/aspnetcore:prod
link 出现了，db出现了  db是别称

进入容器
docker exec -it aspnetcore bash 
ping db

docker inspect mysql01 看下mysql的ip地址  是否与db一样
一样的话，说明webapi的镜像，可以访问mysql的镜像了

浏览器中访问localhost:8002/api/values
此时访问的就是运行在容器里面的代码，
相当于一套环境里有两个容器在运行 
这是我们通过link的方式建立的容器互联
下节我们继续用network方式来连接
