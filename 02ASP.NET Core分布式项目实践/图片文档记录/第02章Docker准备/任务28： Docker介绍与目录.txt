我们会快速讲一下Docker是个什么样子的东西，以及它适合做一些什么样的事情
它有两大特点 非常明显，
节约时间 对于公司和个人用它实现快速的部署，和启动 ，有多快呢 ，比虚拟机要快，虚拟机启动要好几分钟， docker启动时毫秒级的，一分钟可以启动好几百，上千个doker容器，
节约成本  为什么呢 虚拟机最大的特点呢就是在每一个虚拟机上，它是会独立运行一个操作系统，一个完整的操作系统，不管是windows还是linux，完整的硬件系统他都会消耗硬件资源，以及消耗cpu 消耗内存，这些东西都是需要  这样时间和资源上都消耗了
docker呢 在容器级别把操作系统这一层去掉了，他其实是一堆文件的集合，没有一个操作系统， 每个容器当中是没有操作系统内核的 去掉这一层之后呢，简单的来说 它同样是具有隔离性的，它的隔离性是由我们的docker engine它来实现的，在多个容器运行时，其实它在我们HOst os上他其实也是一个进程，那么多个进程之间在系统层面 在hostos级别进行资源上的隔离，是由docker engine来完成的，所以它相当于替代了原先的虚拟机里做的事情，从而可以达到我们刚才所说的 它为什么可以做到快速的响应，部署 启动，节约成本，
 
节约时间 快速部署和启动
节约成本


docker 可以干那些事情嗯
标准化应用发布
 我们之前对操作系统 对vm来说呢  我们还是要做一些部署和发布，那么在docker上 一般我们是做标准化打包， 怎么来讲 我们一个应用程序发布， 比如说，我们要做 里面包含了redis 包含了一些其他的一些等等应用，包括它可以帮我们的代码全部都放到上面，整体打一个镜像包出来，这个镜像包拿到哪里都可以用，就是你不用在担心你的里面，会少什么东西，或者配置文件不一样，少一个依赖之类的，它会把所有的依赖全部都打包成一个镜像，这镜像拿到哪里，只要有这个docker engine都可以运行，所以它是做一个这样一个标准化，
 第二个是方便来做持续集成，这一点其实也很好理解，其实在之前我们是 不借助容器也可以做持续集成， 有了容器之后呢容器会跟我们的代码结合在一起，去做这个持续集成，我们后面会给大家演示，所以他会更方便一点，关于什么是持续集成，后面也会介绍到， 暂时先理解为方便做自动发布，当然持续集成并不是只有这一点点事情，
 第三 用容器来做 为集群中轻量的主机或节点，现在来说 像大家 以前我们做分布式集群的时候，要不全是硬件，成本贵，要不就是虚拟化技术来实现 现在我们一些互联网应用 他们用的是容器集群，基于 其他一些容器的云技术来实现的这个集群，这个集群相对来说，成本会更低一些，并且响应性，包括处理上 会优雅些，
 第四方便构架基于 soa或者微服务架构的系统  
基于以上三点 更方便来构架基于 soa或者微服务架构的系统 所以容器 docker技术它是跟我们微服务架构密不可分的，微服务架构之所以能够这么的流行，也是有docker的一臂之力的，因为它轻量之后涉及到的大量的小微的应用发布和部署，如果没有docker来支撑的话，它会相对来说，比较笨重些


关于docker会给大家讲哪些东西
镜像 容器 与仓库 docker当中的三个基本概念
用docker学会redis mysql mongo gitlab等运行  持续集成和自动发布会用到gitlab
容器镜像的制作  学会如何自己build一个镜像
数据卷与网络  数据卷外部挂载的磁盘 多个容器怎么进行网络的交互
。net core 自动部署 with gitlab ci
net core 自动部署 with gitlab on docker
构建一个私有的仓库 这样我们就需要把我们自己的仓库存到官方的仓库上面
docker swarm和k8s初探
管理工具使用  最开始我们都是使用命令行，后面使用一些管理工具
