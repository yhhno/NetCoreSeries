问题1： 语法嘛 不要看到语法就蒙， 语法是写东西的格式，写啥东西呢？ 配置，配置啥呢？ 配置命令，  分析下来一目了然。
问题2：分析后。我们只用shell就可以了， 其实我们确定了目标和范围后，第二个文档中的很多我们都不需要用得到，   确定目的和范围多重要呀  不然看到一大片，就蒙了额，蒙了就不知道干啥了。
问题3：学到 想到就要用， 比如知道了cqrs，想着如何唬住面试官，平时学时要积累，

今天给大家讲下gitlab-ci 的写法，我们不会从头到尾给大家讲，因为这个东西属于工具一样的东西，有手册就可以去操作，跟我们docker-compose有点像，主要是对着命令去写，去打就可以了，主要来说呢

两个文档
Gitlab CI 官方配置文件参数说明（中文）

快速入门 https://docs.gitlab.com.cn/ce/ci/quick_start/README.html 

配置文档讲解 https://docs.gitlab.com.cn/ce/ci/yaml/

我们先看快速入门，里面非常简单， 让CI工作很简单，只需要 一个配置文件，给项目配置一个runner就可以了
配置文件，最顶层为每个job的名称，rtest，job的名称下面有scirpt 然后在script下，写上你的shell命令就可以了。
我们的项目上例子
rtest: job名称
  script:下面是一个数组
    - cd User.API  shell命令
    - docker-compose up -d  shell命令

快速入门上的例子 非常简单，
我们了解这个初步简单的完整流程，接下来就要看我怎么写 更完整 更丰富的yaml配置，就需要看第二个文档
 第二个文档一开始其实还是和快速入门讲的一样，都是shell命令的用法，
 接下来呢就是docker的用法，因为在上节课我们讲了 配置Runner 的executor时候，有shell 有docker 有kubernetes，
 如果你要用docker作为executor的话，我觉得用它的docker 提供的功能不会那么强大，也就是在这个配置文件中 配置image 和service  但我觉得没有必要，因为我们可以自己写dockerfile 或者docker-compose这个文件去生成我们的镜像和run 容器，不需要通过gitlab ci来取配置镜像和容器，它就把image和service通过它的方式封装了一层，来配置的，我觉得没有必要，大家可以直接用dockerfile和docker-compose配置文件就可以了，
 而在gitlab CI中稍微有点不一样，  其实都是配置嘛，
 我们主要看shell方式， 以为shell脚本的话，我们可以用它来跑docker也好，执行一些powershell脚本，或者其他一些 甚至连python的脚本也可以，，所以我们用它后面来做一些自动化测试的这个api等等也非常方便，
 其实我们确定了目标和范围后，第二个文档中的很多我们都不需要用得到，
 我们基本上只需要script 写很多的shell脚本，然后用它来执行就可以了，
 当然还有一些 比如说tags  我们上节课讲注册runner的时候，就tags没有填， 这个tags呢就是说我们这个yaml文件里写了tags之后，它会触发哪些runner，因为只有tags对应上了之后，它才会触发，比如说我这个机器上 可能是好几个程序的测试环境，那我肯定是说配了好几个runner，只有当user.api的程序提交上去后，我只跑user.api的runner，我肯定是通过tags映射起来的，那就不会让多余的runner运行起来，
 然后还有一个就是when 它就是可以在成功或者失败的时候执行其他的一些东西，包括script
 stage 阶段 猜想是不是要分阶段做任务呀，这个stage可以 我们可以先build 可以分好几个阶段，build完之后，他成功完成之后呢 我们可以开始执行test――job，写一些shell命令， 依次的顺序是build test deploy 最后 cleanup 这个顺序一直走下来， 这个到我们后面真正用项目开始实践的时候，会更详细的去讲，在这里我们只是先简单的把一些技术先准备好，也就是脉络搞清楚，
 我们现在也知道怎么通过docker-compose来 以及结合yaml gitlab-ci 来把我们的东西部署到测试环境上 到后面我们项目真正开始的时候 我们还会加上单元测试 自动跑和集成测试的整个跑动，这样来测试保证我们的api，在每一次写完之后，他都能自动做一些校验，保证不会出现我的代码好好的，然后突然被人改了一下，改坏了这种情况，
 基本上来说我们通过gitlab-ci可以做到这样的一些东西，
 另外过于持续集成概念，大家也可以去理解下，这个现在在互联网企业当中， 会比较流行一点， 大家都在讲持续集成，讲快速迭代，那么我们首先要做到的是什么呢、比如说我们一个星期，发布一次，快速的每个星期去交付一些任务，我们用持续集成能够帮到我们什么、
 http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html
 首先在这片文章当中，大家可以大致去看下，它分为好几个部分，第一部分持续集成简单的概念就是 快速的发布，快速把代码从开发环境集成到主干 我们之前讲的git flow 快速合并到master，然后第二个是持续交付，持续交付就是 合并master之后呢，快速把代码发布到生产环境 交付给我们的用户 这个交付是交付给质量团队，就是说我这个代码可以发布了，我要交出去，开发团队交给测试或者其他团队，
 持续部署呢在交付的基础之上正式把它部署到生产环境，通过测试环境进入生产环境 它主要的流程包括第一步开始写代码，写完代码之后，直接commit到dev分支，测试的第一轮我们会进行单元测试 包括其他的一些测试 比较简单一些，然后构建  然后测试第二轮， 然后部署  回滚
 持续集成 这个概念呢 如果通过人工手动全部来做的话，会非常复杂，因为你每一次 每一周不停的去发布到测试环境 测试环境发布到生产环境 其实非常耗费时间的 如果是手工的话，如果是比较大的项目，你可能要花 一个小时左右的时间， 
 我们要做的事情就是 其实也就是现在devops 开发运维的概念，就是把整个流程全部自动化，只要你提交上去  后面就自动开始发布到测试环境，自动运行测试脚本，你可能是api的测试，包括一些ui的自动化测试，包括性能测试全部自动化来跑，当你在gitlab上看到它是绿色的时候 说明你提交的代码没有问题，，所有测试都能够通过，那当然如果有问题的话 它会变成红色 因为现在我们还没有配上报警，你知道它错误后，你必须当天把它给修复了，
 只有做到持续集成和自动化结合起来，他才能更好地提高开发团队的效率，真正做到快速迭代，否则的话，容易出错和混乱
 所以我们做持续集成，很多的一些基础设施包括我们的devops 以及我们的api自动化测试这东西都是准备好的否则的话你，你如果去做快速迭代，基本来说会出很多的错
 马叔叔说:我们将持续集成他不能消除bug，而是帮我们更容易发现他，如果我们没有一套足够好的自己的验证机制，包括自动的api测试，自动的ui测试，我们快速做到发布迭代，只会把这些bug暴露出去，但这个暴露是暴露给我们的用户了，而不是给我们自己，这个对我们产品来讲 其实是没有太大的好处的
 这个持续集成我们在第二章通过docker，把整个docker一些概念知识全都普及之后，我们用gitlab-ci 这块给过了一遍，到后期我们项目开发当中 就会正式把这套体系用起来，结合我们的api自动化，api的单元测试和集成测试 这两套全部加起来，所以第二章内容基本上，到此为止，我们后面到第三章正式写 user.api的时候，以后后面项目中会逐步咋把这一整套流程加入进我们项目  

