    问题1：看不明白就不看了。
	/// <summary>
	/// Client for retrieving OpenID Connect discovery documents  看不明白就不看了。
	/// </summary>
	public class DiscoveryClient : IDisposable
	问题2： 遇到以前不会的就犯嘀咕， 出现否定   问题1出现的次数多了，就会出现问题2
	var httpClient = new HttpClient();//这里有个啥问题？
    httpClient.SetBearerToken(tokenResponse.AccessToken);
    var response = httpClient.GetAsync("http://localhost:5001/api/values").Result;
    if(response.IsSuccessStatusCode)
    {
        Console.WriteLine(response.Content.ReadAsStringAsync().Result);
    }
	问题3： 专有名词都解释清晰。例如集成


server 和api都完成了，并用postman走通了认证和授权整个流程
接下来我们创建一个第三方的应用程序，相当于它来请求我们的api，
程序上来说可以集成一个IdentityModel提供的类库来访问   集成是啥意思嘛 就是引用 依赖嘛   在a中集成b，也就是说在a中引用b，使用b
也就说所有的流程操作都有对应的方法来实现
创建一个控制台程序 dotnet new console --name ThirdPartyDemo
添加nuget包 IdentityModel
添加命名空间 using IdentityModel.Client;
首先我们需要访问以下我们的identityserver,看它是否可以访问
      static void Main(string[] args)
        {
            var diso = DiscoveryClient.GetAsync("http://localhost:5000").Result;//因为是异步方法，同步调用的话，调用result属性
            if(diso.IsError)
            {
                Console.WriteLine(diso.Error);
            }

            Console.ReadLine();
        }

在不启动identityserver的情况下，启动下ThirdPartyDemo
控制台输出: Error connecting to http://localhost:5000/.well-known/openid-configuration: An error occurred while sending the request.
注意DiscoveryClient.GetAsync 访问的是 http://localhost:5000/.well-known/openid-configuration， 它会返回好多配置信息
我们可以根据返回的文档，获取我们想要的东西，比如获取token的地址

接下来创建一个tokenclient 获取token

            var tokenClient = new TokenClient(diso.TokenEndpoint, "client", "secrect");
            var tokenResponse = tokenClient.RequestClientCredentialsAsync("api").Result;//同步调用
            if (tokenResponse.IsError)
            {
                Console.WriteLine(tokenResponse.Error);
            }
            else
            {
                Console.WriteLine(tokenResponse.Json);
            }
获得token后，访问api

 var httpClient = new HttpClient();//这里有个啥问题？
            httpClient.SetBearerToken(tokenResponse.AccessToken);
            var response = httpClient.GetAsync("http://localhost:5001/api/values").Result;
            if(response.IsSuccessStatusCode)
            {
                Console.WriteLine(response.Content.ReadAsStringAsync().Result);
            }


这就是我们通过第三方程序，通过IdentityModel提供给我们的api，实现的认证与授权的整个流程
有类库真好


