openidconnect是建立在Oauth2.0之上的，并且对于OAuth2.0的不足做了改进
OAuth是用来做授权，它负责 告诉第三方客户端能够对这个用户 干什么？不能够干什么？ 而他们没有告诉第三方 这个用户是谁？需要第三方单独去获取。这是原先OAuth这个流程在这点上的有一些不足的地方，所以在这个基础之上，有了一个Openidconnect，它呢主要就是负责 登录完后的时候，把用户信息一并返回回去。
OAuth2.0中有四个对象第三方客户端，微博授权中心，用户，微博开放平台。 第三方在微博授权中心，得到用户的授权，然后在微博开放平台操作用户的数据
identityserver中实现openidconnect的时候 有几个角色 client ，apiresource ，testuser，其中testuser是角色的实现的一种，有个Identityresource，它和testuser有关系，当我们用asp.net core identity来实现的时候，它就是一个 applicationuser，Identityresource它会返回给客户端是什么东西呢？ 也就是我们的claims，其实在背后呢，claims数据从哪里来的呢？通过IdentityResource背后的testuser或者applicationuser,Identityresource是怎么把testuser或者applicationuser的信息转换为claims的，就是通过profileservice，而这些claims就是返回给我们的第三方客户端，
接下来我们就会来实现一下identityresource，通过它和 Oauth流程相结合 然后实现一个mvc的客户端，然后再登录的时候，跳转到我们的登录中心，登录完后之后，直接回拿到Accestoken和用户信息，

asp.netcore基础课程中，最后一节有一个完整的登录案例
我们要把这个网站变成单点登录，现在它是自己登录自己使用，然后我们现在需要的是把它自己的登录信息返回第三方，所以我们会首先在这个网站上添加identityserver的nuget包
把之前实现的Identityserver 搬到这里
添加config类
  /// <summary>
    /// 初始化identity server
    /// </summary>
    public class Config
    {
        //这个会用来所有可以访问的对象，也就是用户的资源
        public static IEnumerable<ApiResource> GetResources()//测试方法 模拟一下 
        {
            return new List<ApiResource>
            {
                new ApiResource("api1","MY Api")
            };
        }

        public static IEnumerable<Client> GetClients()//测试方法 模拟一下 
        {
            //到最后我们会做一个web界面，把它全部统一添加进去，现在其实它是相当于在内存里来管理我们的clients  为啥内存  因为放在list里面
            return new List<Client>//也是会返回客户端的枚举
            {
                new Client()
                {
                    ClientId="mvc",//clientid
                    AllowedGrantTypes=GrantTypes.Implicit,//允许访问的方式
                    ClientSecrets =
                    {
                        new Secret("secret".Sha256())//我们最好对clientsecrect进行简单的加密  Sha256为Identity server的一个扩展方法
                    },
                    AllowedScopes={ "api1"}// 允许访问的资源
                }
            };
        }
        public static List<TestUser> GetTestUsers()//测试方法 模拟一下  TestUser为 测试的user类
        {
            return new List<TestUser>
            {
               new TestUser
               {
                   SubjectId="10000",//是它id的一个键
                   Username="jesse",
                   Password="123456"
               }
            };

        }

        public static  IEnumerable<IdentityResource> GetIdentityResources()//测试方法
        {
            return new List<IdentityResource>
            {
                new IdentityResources.OpenId(),//这个方法说明了啥？  IdentityResources这是个啥类
                new IdentityResources.Profile(),
                new IdentityResources.Email()
            };
        }


    }


修改Stratup
  public void ConfigureServices(IServiceCollection services)
        {

            //在添加mvc之前 添加 Identitysever
            services.AddIdentityServer()
                .AddDeveloperSigningCredential()//我们要一个开发的证书

                //更改Identity server 4配置 
                .AddInMemoryApiResources(Config.GetResources())
                .AddInMemoryClients(Config.GetClients())
                //添加GetTestUsers到配置中区
                .AddTestUsers(Config.GetTestUsers())

                //添加IdentityResource
                .AddInMemoryIdentityResources(Config.GetIdentityResources());


            services.AddMvc();
        }




配置加完，加应用，添加中间件
  app.UseIdentityServer();
  
此时我们已经把identityserver 添加到mvc中了

接下来我们要到controller里，把逻辑实现下
我们把登录给改造下
我们在登录的地方，大家可以想象下，肯定是用户在这个地方验证下用户名和密码，
在config中添加了模拟用户 testuser，testuser会被放到一个叫testuserstore的地方，我们可以通过依赖注入获取到，testuserstore是在identityserver4.test命名空间下
 private readonly TestUserStore _users;
        public AccountController(TestUserStore users)
        {
            _users = users;
        }
有了获取用户的实例，我们就可以在登录的方法里，验证用户了
实现登录逻辑