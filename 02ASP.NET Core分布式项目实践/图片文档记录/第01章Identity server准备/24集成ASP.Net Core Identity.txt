问题1：模仿十分钟速成课
问题2： 模拟的好处



上节课我们把consent这块完成了 我们再次启动来看下
如果是启动两个项目的话，我还是建议用命令行方式来启动  效率会高些
dotnet run

本节课在原来代码的基础上，集成 identity
修改startup
     //配置EF
            services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection"));//EF使用SqlServer,并获取连接字符串,也就是获取配置信息
            });

            //配置Identity
            services.AddIdentity<ApplicationUser, ApplicationUserRole>()//为啥是这两个参数
                .AddEntityFrameworkStores<ApplicationDbContext>()//为啥有这步骤
                .AddDefaultTokenProviders();//这个有啥用


添加IdentityServer4.AspNetIdentity包
修改配置
      //在添加mvc之前 添加 Identitysever
            services.AddIdentityServer()
                .AddDeveloperSigningCredential()//我们要一个开发的证书

                //更改Identity server 4配置 
                .AddInMemoryApiResources(Config.GetResources())
                .AddInMemoryClients(Config.GetClients())
                //添加identityResource
                .AddInMemoryIdentityResources(Config.GetIdentityResources())

                ////添加GetTestUsers到配置中区  测试的
                //.AddTestUsers(Config.GetTestUsers());

                //真实的数据库
                .AddAspNetIdentity<ApplicationUser>();


此时配置完成
修改accountController的逻辑，以前用的TestUserstore
修改构造函数
    private UserManager<ApplicationUser> _userManager;//与user的管理有关, 增删改查
        private SignInManager<ApplicationUser> _signInManager;//与登录的管理有关,
        private IIdentityServerInteractionService _interaction;

        public AccountController(UserManager<ApplicationUser> userManager, SignInManager<ApplicationUser> signInManager, IIdentityServerInteractionService interaction)//通过依赖注入,获取实例
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _interaction = interaction;
        }

修改register action


 [HttpPost]
        public async Task<IActionResult> Register(RegisterViewModel viewModel, string returnUrl = null)
        {

            if (ModelState.IsValid) //model验证成功,此处是EF绑定的验证通过,内部处理还可能有错误
            {

                //有了viewmodel我们就可以创建我们的用户
                var identityUser = new ApplicationUser
                {
                    Email = viewModel.Email,
                    UserName = viewModel.Email,
                    NormalizedUserName = viewModel.Email
                };

                //因为CreateAsync为异步方法,所有要用await来接收, 所有Register也要修改为异步方法
                var identityResult = await _userManager.CreateAsync(identityUser, viewModel.Password);
                if (identityResult.Succeeded)//创建成功
                {
                    //_signInManager.SignInAsync是这个HttpContext.SignInAsync()方法的封装
                    await _signInManager.SignInAsync(identityUser, new AuthenticationProperties { IsPersistent = true });
                    //return RedirectToAction("Index", "Home");
                    return RedirectToLocal(returnUrl);//ReturnUrl 需要做判断, 存在多个地方,所以 抽象个私有方法, IActionResult 可以多次传递
                }
                else//创建失败,此处是不符合Identity的密码规则.
                {
                    AddErrors(identityResult);
                }

            }

            return View();//model验证不成功,,modelstate中的错误信息显示在view中
        }

修改login  action

使用_userManager和_signInManager来做用户的管理和登录 工作。 提供的封装的方法
   [HttpPost]
        public async Task<IActionResult> Login(LoginViewModel viewModel,string returnUrl=null)
        {
            if (ModelState.IsValid) //model验证成功 此处是EF绑定的验证通过,内部处理还可能有错误
            {
                //校验用户是否存在
                var user = await _userManager.FindByEmailAsync(viewModel.Email);
                if (user == null)//用户不存在
                {

                    ModelState.AddModelError(nameof(viewModel.Email), "username not exists");
                }
                else
                {
                    if (await _userManager.CheckPasswordAsync(user, viewModel.Password))//密码正确
                    {
                        //处理登录成功的逻辑

                        //记住功能
                        var props = new AuthenticationProperties
                        {
                            IsPersistent = true,
                            ExpiresUtc = DateTimeOffset.UtcNow.Add(TimeSpan.FromMinutes(30))
                        };

                        await _signInManager.SignInAsync(user, props);

                        if (_interaction.IsValidReturnUrl(returnUrl))
                        {
                            return RedirectToLocal(returnUrl);//ReturnUrl 需要做判断, 存在多个地方,所以 抽象个私有方法, IActionResult 可以多次传递
                        }
                        //方式一
                        //else
                        //{
                        //    return Redirect("~/");
                        //}
                        
                        //方式二
                        return Redirect("~/");
                    }
                    ////方式一
                    //else//密码不正确 也就是登录不成功的逻辑
                    //{
                    //    ModelState.AddModelError(nameof(viewModel.Password), "wrong password");
                    //}

                    //方式二
                    ModelState.AddModelError(nameof(viewModel.Password), "wrong password");
                }

                
                
            }
            return View(viewModel);//model验证不成功,,modelstate中的错误信息显示在view中
        }




两种方式的区别
//方式一
//else
//{
//    return Redirect("~/");
//}
                        
//方式二
return Redirect("~/");


是否记住功能

  public class LoginViewModel
    {
        [Required]
        public string Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }
        public bool RemeberMe { get; set; }

       
    }

修改login  action中的 记住功能
//记住功能
AuthenticationProperties props = null;
if (viewModel.RemeberMe)
{
        props = new AuthenticationProperties
    {
        IsPersistent = true,
        ExpiresUtc = DateTimeOffset.UtcNow.Add(TimeSpan.FromMinutes(30))
    };
}


最后check下 view 


修改program。cs文件

      public static void Main(string[] args)
        {
            //启动后第一件事情做，，或者启动之前先做 ，两个时候任意都可以，先把数据库跑一遍。
            BuildWebHost(args)
                .MigrateDbContext<ApplicationDbContext>((context, services) =>
                {
                    //我们在这里做我们的初始化
                    new ApplicationDbContextSeed().SeedAsync(context, services)
                    .Wait();//异步方法的同步执行。
                })
                .Run();
        }


编译下，然后启动，首次启动会自动创建默认用户

出现了问题 identity默认的密码策略比较复杂 需要修改
   //配置EF
            services.AddDbContext<ApplicationDbContext>(options =>
            {
                options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection"));//EF使用SqlServer,并获取连接字符串,也就是获取配置信息
            });

            //配置Identity
            services.AddIdentity<ApplicationUser, ApplicationUserRole>()//为啥是这两个参数
                .AddEntityFrameworkStores<ApplicationDbContext>()//为啥有这步骤
                .AddDefaultTokenProviders();//这个有啥用


             //Identity默认情况下,对密码格式限制非常严格,我们修改下,应该是配置,那肯定是修改option了
            services.Configure<IdentityOptions>(options =>
            {
                options.Password.RequireLowercase = false;
                options.Password.RequireUppercase = false;
                options.Password.RequireNonAlphanumeric = false;
                options.Password.RequiredLength = 2;
            });



用生成的用户名和密码登录下


成功的话，就完成了替换testuserstore为asp.net core identity


另外我们的client和apiresource还是从config中读取的，也属于测试数据，非真实的数据库