问题1: 就在这一瞬间，不知道如何模拟? 如何模式用户名密码呢？ 出现不知道的情况， 没有深究
问题2：   添加代码模拟密码模式  我们看到的东西，背后就是这样的，   有时候，我们看到的东西，想象不出来背后是什么


我们上节把client credential grant 给实现了
这节我们来讲Resource owner password credentials grant 密码模式
密码模式会比客户端模式严格，安全级别高一些，它主要是还要求用户输入 就是第三方要求拥有 输入 用户名和密码，之后才可以访问我的api
代码实现下
共两步骤 来集成密码模式
1.Config添加用户的配置
2.添加client的配置 
用户的配置是什么呢？因为我们要用户名和密码，所以我们需要一个测试的用户，我们现在是直接在定义个测试的用户，到正式情况下，我们会从数据库当中去取用户，测试的情况下，用户比较简答
首先引用Identityserver.Text
添加GetTestUsers()方法
 public static List<TestUser> GetTestUsers()
        {
            return new List<TestUser>
            {
               new TestUser
               {
                   SubjectId="1",//是它id的一个键
                   Username="jesse",
                   Password="123456"
               }
            };

        }
添加client  说明啥？ 每个client的模式都是自己设置的， 不是同一设置的， 这样client的模式都可以不一样，灵活极大
 public static IEnumerable<Client> GetClients()
        {
            //到最后我们会做一个web界面，把它全部统一添加进去，现在其实它是相当于在内存里来管理我们的clients  为啥内存  因为放在list里面
            return new List<Client>//也是会返回客户端的枚举
            {
                new Client()
                {
                    ClientId="client",//clientid
                    AllowedGrantTypes=GrantTypes.ClientCredentials,//允许访问的方式
                    ClientSecrets =
                    {
                        new Secret("secrect".Sha256())//我们最好对clientsecrect进行简单的加密  Sha256为Identity server的一个扩展方法
                    },
                    AllowedScopes={ "api"}// 允许访问的资源
                },
                new Client()//密码模式的client
                {
                    ClientId="pwdClient",
                    AllowedGrantTypes=GrantTypes.ResourceOwnerPassword,
                    ClientSecrets={
                    new Secret("secret".Sha256())},
                    AllowedScopes={ "adpi"}
                }
            };
        }

然后配置GetTestUsers到startup中去
 public void ConfigureServices(IServiceCollection services)
        {
            //在添加mvc之前 添加 Identitysever
            services.AddIdentityServer()
                .AddDeveloperSigningCredential()

                //更改Identity server 4配置 
                .AddInMemoryApiResources(Config.GetResources())
                .AddInMemoryClients(Config.GetClients())


                //添加GetTestUsers到配置中区
                .AddTestUsers(Config.GetTestUsers());

            services.AddMvc();
        }



我们运行起来看下，dotnet run  运行认证服务器
运行 api
我们在postman中模拟下我们这个登陆， 也就是模拟下密码模式  就在这一瞬间，不知道如何模拟? 如何模式用户名密码呢？ 出现不知道的情况， 没有深究
为什么postman 可以模拟呢？
 获取token地址： "token_endpoint": "http://localhost:21272/connect/token", 
 在postman中 post 这个地址 body中添加 五个个参数 client_id：pwdClient   client_secrect：secrect  grant_type：password  username:jesse  password:123456
 然后就可以获取token
 注意此时 必须使用x-www-form-urlencoded格式， 而客户端模式 form-data与x-www-form-urlencoded格式都可以

  获取到token之后  启动ClientCredentialApi 客户端
 访问api时， header 添加 Authorization ： bearer +token  get方式访问，   
 访问成功

 到此为止， 模拟算是完成了

 我们建一个控制台程序
 dotnet new console --name PwdClient
 添加nuget包 IdentityModel IdentityModel提供类库访问

 为什么要用vs code这个工具呢？
 1刚开始使用我也不习惯，觉得特别难操作，但是使用完之后呢 因为它很轻很快，vs2017 有时候会卡，用这个感觉很顺畅
 2.我希望在net下是跨平台开发的额，有时候会用mac笔记本开发，这样的话，切换 也没有不熟悉的地方，用熟悉后我觉得都可以
 大家在刚开始学一个新技术或者新语言或者新工具的时候，刚开始都是一样的，都会有一些陌生，觉得很痛苦，然后就会有一些挫败感，而这个挫败感，我觉得是每一次你学新东西都会遇到的，当然如果你克服这种挫败感之后，如果是好的东西，会加快你的效率

 dotnet restore
  
  添加代码模拟密码模式  我们看到的东西，背后就是这样的，   有时候，我们看到的东西，想象不出来背后是什么
   static void Main(string[] args)
        {

            //step1 检测验证服务器是否可访问， 可访问返回验证服务器信息
            //返回一个文档，，Client for retrieving OpenID Connect discovery documents 看不明白，就不看了，
            var diso = DiscoveryClient.GetAsync("http://localhost:5000").Result;//因为是异步方法，同步调用的话，调用result属性
            if (diso.IsError)
            {
                Console.WriteLine(diso.Error);
            }

            //step2 根据返回的验证服务器信息， 新建tokenclient 获取token
            var tokenClient = new TokenClient(diso.TokenEndpoint, "pwdClient", "secrect");//之前不明白带有Client结尾的类库是干嘛的？
            var tokenResponse = tokenClient.RequestResourceOwnerPasswordAsync("jesse","123456","api").Result;//同步调用
            if (tokenResponse.IsError)
            {
                Console.WriteLine(tokenResponse.Error);
            }
            else
            {
                Console.WriteLine(tokenResponse.Json);
            }

            //step3, 携带获取的token， 访问api服务器
            var httpClient = new HttpClient();//这里有个啥问题？
            httpClient.SetBearerToken(tokenResponse.AccessToken);
            var response = httpClient.GetAsync("http://localhost:5001/api/values").Result;
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine(response.Content.ReadAsStringAsync().Result);
            }


            Console.ReadLine();
        }




我们来看下密码模式和客户端模式的区别
我们现在还是以第三方的集成的角度来理解OAuth
客户端模式中，
不知道是谁，访问api时返回401，所以第三方使我们颁发了一个client_secret和clientid 给了它，，它拥有一个clientid和clientsecret 用这两个参数去认证服务器认证，认证通过后，获取token， 然后携带token就可以访问api了
这种方式呢 比如说我们第三方平台上有10000个用户，只要有clientid和clientsecret，那么10000个用户的数据都可以访问到   此时的用户是 resource owner

而密码模式
相当于你必须要有每个用户的用户名和密码，有了用户名和密码之后，你才可以拿这个用户的数据，所以在这个地方，大家会注意到，它的安全级别高，它需要通过用户名和密码，找授权服务器拿到token之后，才能进行访问这个用户的api，
第三方是这个样子的，就是大家有可能注意到我们访问认证服务器的时候，输入了client_secret的参数，这个client_secret我肯定不能直接在http协议下或者暴露在客户端传输的地方，那么抓包肯定一下子就抓到了，我们可以这个client_secret不传也可以的
在认证服务
  new Client()//密码模式的client
                {
                    ClientId="pwdClient",
                    AllowedGrantTypes=GrantTypes.ResourceOwnerPassword,
                    ClientSecrets={
                    new Secret("secret".Sha256())},
                    //RequireClientSecret=false,//此时不需要传递client_secret
                    AllowedScopes={ "adpi"}
                }


也就是你可以不输入client_secret,只要给我一个clientid和用户名密码就可以了，这种一般是说比较信得过第三方，才可以这样做，为什么？ 因为 比如说简书需要用新浪微博用户名和密码来登录新浪微博，以及通过新浪开放平台api直接用你这个账号。给你这个账号发微博，我肯定不可能把新浪微博的用户名和密码都给简书，这样就太不安全了，用户也会不信任的，
