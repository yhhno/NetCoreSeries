严重问题：这说明了什么? 有多严重  vm.IdentityScopes = resources.IdentityResources.Select(i => CreateScopeViewModel(i));//遍历所有元素，对每一元素施加function，当然func可以操作 元素，也可以不操作元素，但遍历必须进行的
严重问题 异步方法返回值， await关键字的使用。  其实这算什么问题呢？ 从我想明白的这刻起，它就不是问题了。


补充index的Action
构建model
体现了专人做专事  重构的一个思想
private ConsentViewModel BuildConsentViewModel()
{

}

[HttpGet]
public IActionResult Index()
{
    //逻辑清晰，就生成model
    var model = BuildConsentViewModel();//专人做专事
    return View(model);
}

具体实现BuildConsentViewModel()
具体是实现要做哪些准备工作呢？	

private readonly IClientStore _clientStore;//实例在哪里赋值呢，构造函数里，
private readonly IResourceStore _resourceStore;
private readonly IIdentityServerInteractionService _iIdentityServerInteractionService;

//构造函数的参数，通过依赖注入传值，  就构造函数被调用时，由mvc调用依赖注入容器，获取实例传入
public ConsentController(
    IClientStore clientStore,
    IResourceStore resourceStore,
    IIdentityServerInteractionService iIdentityServerInteractionService)
{
    _clientStore = clientStore;
    _resourceStore = resourceStore;
    _iIdentityServerInteractionService = iIdentityServerInteractionService;
}


准备工作完成了， 开始构建BuildConsentViewModel（）方法

BuildConsentViewModel方法的准备工作
  private async Task<ConsentViewModel> BuildConsentViewModel(string returnUrl)
        {
            //step1 获取一个request
            //异步方法，必须要await调用， 不然返回值的属性，获取不到
            var request = await _iIdentityServerInteractionService.GetAuthorizationContextAsync(returnUrl);//类库方法需要一个参数，从那里来呢
            if (request == null)//逻辑严谨，时刻判断空值，防止bug
                return null;
            //step2 request获取到后，获取client 和resource
            var client = await _clientStore.FindEnabledClientByIdAsync(request.ClientId);//异步方法，必须要await调用， 不然返回值的属性，获取不到 因为返回的是一个Task
            //需要判断client是否为空


            var resources = await _resourceStore.FindEnabledResourcesByScopeAsync(request.ScopesRequested);//此Resource包括了IdentityResource和APIResource
            
        }

有了准备东西，开始使用， 使用又变成私有方法CreateConsentViewModel()， 专人专事嘛
  private ConsentViewModel CreateConsentViewModel(AuthorizationRequest request,Client client,Resources resources
            )//Resources 与Resource的区别
        {
            var vm = new ConsentViewModel();
            vm.ClientName = client.ClientName;
            vm.ClientLogoUrl = client.LogoUri;
            vm.ClientUrl = client.ClientUri;
            vm.AllowRememberConsent = client.AllowRememberConsent;//这些都是从请求的url中传过来的，  如果为true时，仅需第一次点授权，之后都是自动授权  那同理自动登录咋实现的呢？


         vm.IdentityScopes = resources.IdentityResources.Select(i => CreateScopeViewModel(i));//遍历所有元素，对每一元素施加function，当然func可以操作 元素，也可以不操作元素，但遍历必须进行的

            vm.ResourceScopes = resources.ApiResources.SelectMany(i => i.Scopes).Select(x => CreateScopeViewModel(x));
            //select list<list<T>>
            //SelectMany  list < T >

        }


由于viewmodel中的类型和 Resources返回的类型不一致，需要转换CreateScopeViewModel（）

        private ScopeViewModel CreateScopeViewModel(IdentityResource identityresource)//处理单个IdentityResouce
        {
            return new ScopeViewModel
            {
                Name = identityresource.Name,
                DisplayName = identityresource.DisplayName,
                Description = identityresource.Description,
                Required = identityresource.Required,
                Checked = identityresource.Required,
                Emphasize = identityresource.Emphasize

            };
        }

        private ScopeViewModel CreateScopeViewModel(Scope scope)//处理单个Scope
        {
            return new ScopeViewModel
            {
                Name = scope.Name,
                DisplayName = scope.DisplayName,
                Description = scope.Description,
                Required = scope.Required,
                Checked = scope.Required,
                Emphasize = scope.Emphasize

            };
        }