接下来，我们再给大家回顾下，我们上节所讲的内容
 我们有一个AuthorizationServer，就是我们的认证服务器  是由identity server4实现的
 还有一个api 就是Resource Api
 我们会有一个第三方ThirdParty，  在OAuth流程中，叫做client
 我们来回顾下AuthorizationServer中的配置是如何配置的？我们配了一个Resources和一个Client
 默认api是被保护的  其他的人呢，比如说匿名的人 去访问api的话，直接返回401
 第三方首先去认证服务器获取一个token，也就是是认证通过后返回一个token  为什么能获取一个token
 第三方携带获取的token再去访问api 成功， 有了token为什么能访问成功呢？

 再看下官方定义
 客户端模式（Client Credentials Grant）
 指客户端以自己的名义，  如何体现？ clientid
 而不是以用户的名义，    如何体现？ 没有user什么事？
 向"服务提供商"进行认证。 如何体现  以clientid去认证 获取token
 严格地说，客户端模式并不属于OAuth框架所要解决的问题。
 在这种模式中，
 用户直接向客户端注册，  如何注册？
 客户端以自己的名义要求"服务提供商"提供服务，其实不存在授权问题。  什么授权， 验证服务器要求用户同意？

 它的步骤如下：
（A）客户端向认证服务器进行身份认证，并要求一个访问令牌。
（B）认证服务器确认无误后，向客户端提供访问令牌。

扩展一下  如何扩展下？ 扩展啥呢？ 扩展模式，还是扩展数量， 不能死板的只记得一个client对应一个api，这只是案例教学，可不是全部

我们可以复制出很多的api，
同时我们可以有不同的客户端
然后我们可以去定义每个client可以访问哪些 api
这种流程的情况下，可以比较方便的去控制，保护我们的ResourceAPI,到底可以被哪些访问，
这个整个流程，Identityserver 已经帮我们实现了，
所以可以非常快的集成
这就就是我们给大家讲的用Identityserver来搭建一个登陆中心，同时开启了一个Client Credential模式
