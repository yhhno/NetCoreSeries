开始时间2：20 结束时间5.20 3个小时，预计是两个小时，
问题1： 跟着做，顺下去，如果去调试，或者运行下，或者其他非主干的事情，就太花费时间了，也分散了注意力。 此时我们多余做了什么？ 运行项目，查看数据库，等非主干的事情。

问题2： 遇到问题就卡住了，停止前进。  var user = await  _userManager.FindByIdAsync(subjectId);//此处有个问题，异步方法本应该添加await关键字的，但是此方法没有async，就不知道怎么办了？
问题3： 为什么我不能想到这一步呢？1:基础知识欠缺，2：业务不清晰也就是分析不到位。 接下来实现GetProfileDataAsync ，这个主要是获取claims的，也是要根据subjectid去获取用户，再根据用户去获取cliams,最终claims赋值给 context.IssuedClaims

学习能力是第一核心竞争力

上节课我们把ASP.net core identity 集成到了identity.server4的server端中，为什么可以集成? 怎么集成？
我们在about页面，把登录用户的cliams读取出来了,并且access_token，reflesh_token,id_token 都读取出来

学习能力是第一核心竞争力
@using Microsoft.AspNetCore.Authentication;
@*应该是aspnetcore本身有一套抽象，显示留给了第三方，，也就是有了扩展能力*@
@{
    ViewData["Title"] = "About";
}
<h2>@ViewData["Title"]</h2>
<h3>@ViewData["Message"]</h3>

<p>
    <dl>
        @foreach (var claim in User.Claims)
        {
            <dt>@claim.Type</dt>
            <dt>@claim.Value</dt>
        }
        <dt>Access Token</dt>
        <dd>@await ViewContext.HttpContext.GetTokenAsync("access_token")</dd>
        <dt>Reflesh Token</dt>
        <dd>@await ViewContext.HttpContext.GetTokenAsync("refresh_token")</dd>
        <dt>Id Token</dt>
        <dd>@await ViewContext.HttpContext.GetTokenAsync("id_token")</dd>
    </dl>
</p>

但是大家看到，client的其他信息都没有显示出来，这是因为我们还没有实现我们的profiles，所以只能拿到一些最基本的信息，就是name
接下来我们要把profile services来实现一下 
我们在server端 的services文件夹添加一个ProfileService类，继承自IdentityServer4.Services中的接口IProfileService， IdentityServer4中定义了抽象，让我们可以自定义实现

问题1：跟着做，顺下去，如果去调试，或者运行下，或者其他非主干的事情，就太花费时间了，也分散了注意力。
接下来实现接口的IsActiveAsync方法，
用户是否激活
首先设置为false
接下来我们在什么情况下，给它设置为ture 用户非空的时候，设置为true
当我们拿到subject的时候，对应到数据库的主键id，根据获取到的sujectid，去拿到用户信息， 用户非空的时候，设置为true
既然与用户查找有关，就需要Usermanager。老办法 构造函数注入
 private UserManager<ApplicationUser> _userManager;//与user的管理有关, 增删改查

        public ProfileService(UserManager<ApplicationUser> userManager)
        {
            _userManager = userManager;
            
        }
老问题，非控制器构造函数的依赖注入，都要手工添加
services.AddScoped<ConsentService>();//自定义的依赖注入
//services.AddScoped<ProfileService>();//非自定义的依赖注入 这样写就不对了额


//在添加mvc之前 添加 Identitysever
services.AddIdentityServer()
.AddDeveloperSigningCredential()//我们要一个开发的证书

//更改Identity server 4配置 
.AddInMemoryApiResources(Config.GetResources())
.AddInMemoryClients(Config.GetClients())
//添加identityResource
.AddInMemoryIdentityResources(Config.GetIdentityResources())

////添加GetTestUsers到配置中区  测试的
//.AddTestUsers(Config.GetTestUsers());

//真实的数据库
.AddAspNetIdentity<ApplicationUser>()
.Services.AddScoped<IProfileService, ProfileService>();//添加依赖注入

实现IsActiveAsync

	public interface IProfileService
	{
		/// <summary>
		/// This method is called whenever claims about the user are requested (e.g. during token creation or via the userinfo endpoint)
		/// </summary>
		/// <param name="context">The context.</param>
		/// <returns></returns>
		Task GetProfileDataAsync(ProfileDataRequestContext context);

		/// <summary>
		/// This method gets called whenever identity server needs to determine if the user is valid or active (e.g. if the user's account has been deactivated since they logged in).
		/// (e.g. during token issuance or validation).
		/// </summary>
		/// <param name="context">The context.</param>
		/// <returns></returns>
		Task IsActiveAsync(IsActiveContext context);
	}


public async Task IsActiveAsync(IsActiveContext context) //虽然接口定义中没有加async，但是在实现中可以添加async
        {
            context.IsActive = false;
            var subjectId = context.Subject.Claims.FirstOrDefault(c => c.Type == "sub").Value;
            var user = await  _userManager.FindByIdAsync(subjectId);//此处有个问题，异步方法本应该添加await关键字的，但是此方法没有async，就不知道怎么办了？
            //if(user!=null)
            //{
            //    context.IsActive = true;
            //}
            context.IsActive = u
			}

问题2： 遇到问题就卡住了，停止前进。  var user = await  _userManager.FindByIdAsync(subjectId);//此处有个问题，异步方法本应该添加await关键字的，但是此方法没有async，就不知道怎么办了？
在复杂的情况下，不仅仅要判断用户时候为空，而且还要判断用户是否锁定， 如果启用用户是否锁定，当用户输入错误密码次数过多，我们会把用户锁定 


接下来实现GetProfileDataAsync ，这个主要是获取claims的，也是要根据subjectid去获取用户，再根据用户去获取cliams,最终claims赋值给 context.IssuedClaims
问题3： 为什么我不能想到这一步呢？1:基础知识欠缺，2：业务不清晰也就是分析不到位。 接下来实现GetProfileDataAsync ，这个主要是获取claims的，也是要根据subjectid去获取用户，再根据用户去获取cliams,最终claims赋值给 context.IssuedClaims
 public async Task GetProfileDataAsync(ProfileDataRequestContext context)
        {
            var subjectId = context.Subject.Claims.FirstOrDefault(c => c.Type == "sub").Value;
            var user = await _userManager.FindByIdAsync(subjectId);//此处有个问题，异步方法本应该添加await关键字的，但是此方法没有async，就不知道怎么办了？
            var claims = GetClaimsFromUser(user);
            context.IssuedClaims = claims;
        }

需要把user信息转换为claims，所以定义一个私有方法GetClaimsFromUser

  private async Task<List<Claim>> GetClaimsFromUser(ApplicationUser user)
        {
            var claims = new List<Claim>
            {
                new Claim(JwtClaimTypes.Subject,user.Id.ToString()),
                new Claim(JwtClaimTypes.PreferredUserName,user.UserName)

            };

            //角色信息,角色信息需要在用户添加时，赋值， 否则为空
            var roles = await _userManager.GetRolesAsync(user);
            foreach (var role in roles)
            {
                claims.Add(new Claim(JwtClaimTypes.Role, role));
            }

            if (!string.IsNullOrWhiteSpace(user.Avatar))
            {
                claims.Add(new Claim("avatar", user.Avatar));
            }

            return claims;
        }

user.Avatar字段需要在ApplicationUser类中，添加字段

  public class ApplicationUser: IdentityUser<int>
    {
        public string Avatar { get; set; }
    }


异步方法加Async  如GetClaimsFromUserAsync

identity.server4和asp.netcore identity 为我们封装了很多东西，方便了我们。

此时完成profiles的设计

因为我们修改ApplicationUser，添加了Avatar字段，所以我们要对数据库更新
 Add-Migration AddAvatarToApplicationUser
 Update-Database

 然后打开serserver 去查看

 删除数据，重新走see方法，
 修改seed方法，添加avatar 和role

  public class ApplicationDbContextSeed
    {
        //创建用户，肯定要用到UserManager
        private UserManager<ApplicationUser> _userManager;
        private RoleManager<ApplicationUserRole> _roleManager;
        public async Task SeedAsync(ApplicationDbContext  context, IServiceProvider  services
            )//IServiceProvider是依赖注入的容器， 我们拿到它。
        {
            ////这个地方我们最好Create一个Scope，因为我们不希望，我们的ApplicationDbContext和其他地方 用同一个，也就是共用。
            ////依赖注入的命名空间添加进来
            //using (var scope=services.CreateScope())
            //{
            //    //获取一个userManager实例，通过依赖注入容器。,不保存在外部了。
            //    var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();

            //    //我们先查找下是否有用户。
            //}

            if (!context.Roles.Any())
            {
                _roleManager = services.GetRequiredService<RoleManager<ApplicationUserRole>>();//手工依赖注入
                var role = new ApplicationUserRole() { Name = "Adminstrators", NormalizedName = "Adminstrators" };
                var result=await _roleManager.CreateAsync(role);
                if (!result.Succeeded)//如果创建失败，怎么办呢？
                {
                    throw new Exception("初始默认角色失败："+result.Errors.SelectMany(e=>e.Description));
                }
            }



            //我们先查找下是否有用户。 true 如果源序列中不包含任何元素，则否则为 false。
            if (!context.Users.Any())//没有用户的情况下，也就是系统初始化的另一个维度。 此处存在什么问题？
            {
                _userManager = services.GetRequiredService<UserManager<ApplicationUser>>();//手工依赖注入，

                //新建一个user
                var defaultUser = new ApplicationUser
                {
                    UserName = "Administrator",
                    Email = "qq@qq.com",
                    NormalizedUserName = "Admin",
                    Avatar= "https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1524821554&di=5513cf737bfaec6739833409f485d080&imgtype=jpg&er=1&src=http%3A%2F%2Fjbcdn2.b0.upaiyun.com%2F2016%2F05%2Fb69607c7bb75c609307d5218a825cbd9.png"
                };

        
               var result= await _userManager.CreateAsync(defaultUser, "123456");//添加角色和 创建用户有没有涉及到事务呢？
                await _userManager.AddToRoleAsync(defaultUser, "Adminstrators"); //添加角色，是不是在数据库创建了用户数据呢？
                if (!result.Succeeded)//如果创建失败，怎么办呢？
                {
                    throw new Exception("初始默认用户失败，");
                }
            }



        }
    }

编译成功后，启动 运行下

在vscode中  调试控制台，输入变量名，可以获取变量的内容

没有达到预想的结果  猜测profilesservices 可能没有生效
aspnetcore2.0 对opid	标准 做了一些更改，早期是不要加这些东西，可以直接从profileservice中拿到这块东西也就是claim，后来2.o它是考虑到安全上的因素，即使你所有的东西直接暴露在cookies里面去呢，不太好，，所以它就 你要自己做一些映射，就是把你的从profileservice拿到的这些claims做一个绑定，绑定过之后呢他才会从我们的profileservices 返回的context.IssuedCliams中去拿到，

修改客户端的配置
 .AddOpenIdConnect("oidc", options =>
            {

                //问题 自己看注释，看不出名堂来， 看不明白，也没有意愿去深究，，之记住案例所涉及的的字面意思
                options.SignInScheme = "Cookies";//mvc客户端使用网站这块的登录了
                options.Authority = "http://localhost:5000"; //授权服务器地址
                options.RequireHttpsMetadata = false;//我们也没有证书啥的
				       options.ResponseType = OpenIdConnectResponseType.CodeIdToken;//有啥意义


                //配置下客户端
                options.ClientId = "mvc";
                options.ClientSecret = "secret";
                options.SaveTokens = true;//是不是保存cookies
                options.GetClaimsFromUserInfoEndpoint = true;//它是发起了另外一个请求，到5000的端口下http://localhost:5000/connent/userinfo 去获取用户的claims

                options.ClaimActions.MapJsonKey("sub", "sub");
                options.ClaimActions.MapJsonKey("preferred_username", "preferred_username");
                options.ClaimActions.MapJsonKey("avatar", "avatar");
                options.ClaimActions.MapCustomJson("role", jobj=>jobj["role"].ToString());

                options.Scope.Add("offline_access");
                options.Scope.Add("opendi");
                options.Scope.Add("profile");

            });

profileservice是暴露给我们了一个地址		http://localhost:5000/connent/userinfo   但这不是获取用户信息的api，只是给客户端调用的，


目前的做法是它是发起了另外一个请求，到5000的端口下http://localhost:5000/connent/userinfo 去获取用户的claims
所以id_token 没有包括claims和role

我们可以把这次返回的idtoken 解析下  不包括头像，role等，它是通过发起另外一个请求，到http://localhost:5000/connent/userinfo 去获取

还有一种办法 我们直接把claims夹在IDtoken中，
在client的配置中 设置 AlwaysIncludeUserClaimsInIdToken=true,//claims包括在IDtoken中  此时客户端就不需要做映射配置了

删除下面的配置代码
       options.GetClaimsFromUserInfoEndpoint = true;//它是发起了另外一个请求，到5000的端口下http://localhost:5000/connent/userinfo 去获取用户的claims
                options.ClaimActions.MapJsonKey("sub", "sub");
                options.ClaimActions.MapJsonKey("preferred_username", "preferred_username");
                options.ClaimActions.MapJsonKey("avatar", "avatar");
                options.ClaimActions.MapCustomJson("role", jobj=>jobj["role"].ToString());



学习能力是第一核心竞争力
