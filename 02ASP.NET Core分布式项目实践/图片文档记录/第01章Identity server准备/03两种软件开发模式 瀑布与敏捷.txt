 两种软件开发模式 : 瀑布与敏捷
 为什么想给大家讲软件开发模式呢?其实这里涉及到的是一些项目管理的知识，我一直觉得 不管大家后面的发展方向是走技术路线 或者管理路线，那么技术路线你到后面可能会发展成技术专家或者架构师，管理路线你可能会从一个高级开发发展成技术leader一个组长或者到后面变成一个技术经理然后到技术总监甚至CTO，我们大概职业发展到高级开发，就会出现一个分叉，你要面临一个选择是走技术还是管理，然后但是在这之前，不管你是走那一条路，关于项目管理的知识你是必须要有所掌握的。架构师是没有职权的，但他依旧要领导项目成功，技术管理呢更多的是偏向于从项目流程上的把控，来保证项目的成功，所有都需要把控这个项目从零到最后的上线过程中，都需要有过程上的关注
 
 我们首先给大家看到瀑布的软件开发模式是一种很传统的方式，国内六七年前，是比较流行的 在一些比较大的 或者外包的项目
 它的特点就是分阶段，每个阶段都特别清晰。从计划到开发到最后的上线，整个过程非常清晰，然后在每一个阶段，从问题定义，可行性研究，需求分析，软件设计，编码，测试，维护 。上一个阶段都必须有产出物，拿到之后才能进入下一阶段，比如需求分析后你必须有需求分析文档，或者说确定下来这个需求之后，我们才能进行软件设计，在这之前开发人员是不需要参与的 之前的软件设计和需求分析的等之前的阶段，你有专门的项目经理和架构师或者团队来参与这个环节，而开发人员只是处于待命的状态，或者在做其他的事情，而测试也是在之前的过程是不参与的，所以它是一个典型的阶段性，一段段的过程，整个周期，从计划到运行，持续的周期很长，大概涉及到半年 一年左右的这样一个时间，，这样会出现的问题就是，在你早期的需求和设计的时间花费的特别多，因为你不确定好的话，后期就会出现在开发过程中，再返过头去改设计， 而你所做得事情是一个很大的事情，不是小事情，所以在后期改的情况下，会对整体架构产生很大的影响， 这也就是在传统的瀑布式软件开发模式下。会避免需求的改动，因为你的架构是根据当前的需求来设计的，所以它在改动的时候很容易出现一些问题，包括对需求的变动 不是支持的非常好，

 所以说特别是因为互联网项目的流行，大部分的软件开发从B端转移到C端， C端的需求没有办法很及时的反馈给你，往往是产品经理逐步的去摸索的需求，，所以它最开始会没有办法拿到所有的需求，所以没有办法的情况下，只能进行敏捷式的 一点一点去了解用户的需求，一点一点的去开发

 那么我们可以去对比下瀑布和敏捷 
 在瀑布的情况下，一般是具有各个里程碑的，它会在每个阶段 每个时间点全部定义好，到达这个里程碑后，进入下一个里程碑，，然后强调文档，我们在瀑布式这样的开发过程中，会出现非常多的文档，如需求文档，开发设计文档，各种概要之类的东西，非常详细，它是指导我们进行下一个阶段的指导性东西， 没有它就很难，然后强调分工，在这个过程当中，我刚刚讲到说，我们在瀑布开发方式中，可能是项目经理 在最早期去做需求分析，开发人员是不管的， 在项目经理做完需求分析之后，会形成一个需求文档，然后再交给开发人员或者是架构师去做开发设计文档或者技术实现方案之类的 东西，同样此时开发人员甚至还没有参与到， 开发人员拿到架构师的开发设计文档或者技术实现方案之后，再去开发，然后这个时候 跟需求也好，跟用户那边也好，技术上来说都是脱节的 ，它理解用户需求，或者设计上来说没有那么的完整，所以很容易出现一些问题，然后第四个是避免变化，变化的代价太大，最后一个是会把计划定制的比较强，因为也是为了避免变化，然后一旦发生变化后，大家都是知道在一般的软件外包公司，或者做甲方乙方的这样的公司，出现的特别严重 ，也就是所有你的需求的改动，都是需要经过我们商议，确认可以改的时候，我们才能改，否则是拒绝，不然你会涉及到一些价格问题，这种开发方式在ToB的一些大型软件来说，相对来说会出现的比较频繁一些 ，主要也是因为他们特色所决定的

 那么我们来看一些敏捷
  第一点迭代， 因为在最开始的时候需求其实并没有那么的明确，所有没有办法在最开始，也很难把所有的需求列的非常清晰，我们只能了解到你最核心的需求，比如说你的核心需求是变成一个开发的高手，这是我的需求，但是变成一个开发高手的需求 到底要做哪些事情，以及现在你有哪些是能力上已经匹配的   需要接触哪些事情。这些都是稍微不一样的，需要一点一点的先做到一部分，然后大家去交流去改进 这个就是迭代的意义，它更能满足用户的需求，虽然在最开始只是抓住最核心的一点，但会在这个核心的点上会逐步的去改进，
  然后第二点是 可以工作的软件胜过面面俱到的文档，在文档方面没有要求的那么强烈，只要我的软件能够出来能够工作的话，它有一些文档是可以省略的，所以只要求一些最基本的核心文档就可以了
  第三点 协助 沟通， 在面对强调分工的时候，这里体现的是要求我们协助和沟通，所以在这个点上体现我们如何做一个在领导眼中的好下属，同事眼中的好伙伴， 然后在这个时候，我们需要做到的是了解我们正在做得事情，积极的去沟通和协助，所以每一个人在敏捷的团队当中会参与到所有的细节，甚至从用户需求的分析到设计到最后的开发测试以及 运维上线，你需要去了解软件开发和生产整个所有的过程，这样你对用户的把握，对需求产品的把握会更准确
  最后一个是拥抱变化，这是典型的在互联网公司应用中所必须抓住的一点， 因为也不是说我们要经常的变，而是用户的需求，第一个没有抓的非常准，第二个用户的需求也在变，第三个用户的需求还会升级，它会对你有更高的要求，因为你一旦满足了这一点，用户会想更好，所以我们不断地去实现用户的想法
  下一个是与客户合作，因为我们的目标是一样的，所以我们应该一起合作，去达成共同的目标


  然后我们来看敏捷，敏捷是一个抽象的概念，也就是说在敏捷下面有好几个分支，其中 一个叫看板还有一个叫Scrum，这些都是敏捷这个抽象的概念 具体的实现，它会给一些更具体的原则，
  其中Scrum也是比较典型的，所以给大家讲一下
  因为你自己现在还不会开始，如果你真正去做这个项目管理的时候，可能还需要做一些正规的培训，而这个时候呢你大概可以看现在的团队当中的项目经理或者你们如果是在做这种Scrum开发，它们是如何运转的，你们开始要去思考整个团队开发的效率，它们所开发的效率是高还是低，或者说整个开发团队的效率是否还能改善，我们通过什么样的方式去改善，是改善流程还是改善工具或者是平台，这个东西大家如果有思考的话，就可以去找到一些解决方法去实践，这个也是你能力提升以及在公司和团队当中得以升职加薪的一些机会，

  角色
  product owner 产品负责人
  Scrum主管     Scrum master
  开发团队      team

  工件
  用户故事  UserStory
  产品订单  Product Backlog
  冲刺订单  Sprint Backlog
  冲刺燃尽图   Burndown Chart

  活动
  计划会 sprint planning meeting
  每日立会  daily standup meeting
  评审会 review meeting
  反思会/回顾会   retrospective meeting

  在这个scrum模式会有一些角色， 
  产品负责人，这个产品负责人一般是这个产品的老板或者主要提需求的那个人，就是希望这个产品达成什么样子的那个人
  scrum主管 有时候会由项目经理来承担，或者由一个其他的人，不在项目里的人来承担这个scrum主管的角色 主要的作用是为了保证整个团队以scrum形式来工作，比如说在进入开发模式的时候，不让产品经理改需求 这也是他的职责之一，同时呢比如召开每日的会议，让大家定时去参与，让大家在会议上不要说一些多余的话，这都是它的角色
  开发团队  所有的人 一起把整个事情去完成

	
	工件
	在工作当中，我们主要涉及到的是一些用户故事 ，这些用户故事其实就是我们之前所讲的需求，但是我们没有描述的那么清楚的需求文档，给大家简单举一个例子，这个用户故事可以是一句话，来描述清楚它的需求  主要来说 你可以从角色和行为来 表现，比如说我们来做一个登陆，这个登陆就可以说  注册用户和未注册用户都可以通过手机验证短信来实现登陆， 这就是一个简单的需求，这作为一个用户故事，开发人员会开始对它进行一些任务的拆解和编码，测试，上线之类的
	产品订单:所有的待开发的一些用户故事 都会放到这个里面，放到backlog里面 就是产品订单里面
	冲刺订单： 也就是我们会分迭代周期，比如说我们是一周一个迭代周期的话，会把所有的 这一周内要开发的用户故事放到一个桶里面，叫做冲刺订单，也就是这一些需求是我们这一周要做的。而scrum master的角色会在这里会体现出来，我们在迭代开始之前会先确定这一周内要开发的用户故事是哪一些，然后定好之后，就不在允许发生变化，我们就保证这一周把这些用户故事 开发完成就可以了，
	冲刺燃尽图：也就是说我们会在最开始的时候 评估下每一个， 再把这些用户故事 细分成细的一些任务，这些任务数量以及时间上的评估，最开始会有一个总和，然后在燃尽图上，每天会去更新你还剩余多少，大家可以看一下燃尽图，从最开始到结束，从最多到最后为零，也就是说全部完成，而每天的变化都会体现在燃尽图上， 大家可以看到蓝色的线，说的是理想情况下应该是这样，就是每天以一定速度，也就是说下滑的趋势是很均衡的，而这个红色就是实际的额， 越和蓝色的贴合，团队工作的越好 也不会出现特别大的波动，就一直很平稳，而出现上线波动，就是往往来说对用户故事的评估 以及对任务的评估都不是非常的合理

	活动
	计划会议：就是我们每周会做一些关于迭代的一些计划会，也就是说我们会决定迭代里做什么，所有的会议都是所有的人一起参加，包括产品负责人 scrum主管和整个开发团队，我们需要了解我们这个迭代去开发哪些内容 
	每日会议： 就是每天会需要大家整个团队碰到一起，看一下我们的进度是什么，这个每日会议大概有3个话题，今天做什么，昨天做了什么，然后现在 遇到的一些问题，所以它会把时间控制的非常短 ，这个会议在15分钟内，只讲这三件事，如果大家遇到什么具体的问题，可以到会议下去聊，最重要的是在这个会议上 让开发团队每一个成员都能够了解到我们的进度是什么样子的，
	评审会： 就是我们评审我们的用户故事以及它时间的评估等等
	反思会；	在每一个迭代之后，在每一个迭代上线后，大家坐下来，可以用匿名的方式用纸条写出每一个所看到的的优点 和缺点，以及好的地方和我们可以改进的地方，好的地方继续保持，不好的地方整个开发团队一起商量怎么去解决，，并且找到一个跟踪这个问题的人，持续把这个问题解决掉，一般在软件开发过程当中，团队是不可能没有问题的，包括人的问题 流程的问题都会有，但是最重要的是整个团队能不能够面对这些问题，共同去解决，这才是问题的关键，而在这整个过程中能够主导整个一切发生，带领团队向更好方式去运作的人就可能是这个团队的leader，所以大家首先不要自己在心理上给自己设限，说我只负责写代码，而在这个项目开发过程当中，你所掌握的其他的一些方面，能够涉及到比较全面的话，对将来每个人的发展都是非常有帮助的


	好我们再看一下大致的流程
	在最开始的时候，我们大概会有一个产品功能列表，这个是已经排出来所有的产品功能列表，都会堆在这个地方，其实就是我们刚才讲的用户故事，很多的用户故事
	然后在计划会议上，整个团队包括scrum master以及开发团队 从功能列表中拿出一些优先级比较高的 作为一周的一个迭代，或者两周的一个迭代的一些开发任务，我们会决定这一两周开发哪些功能，按照团队的 能力我们来开发这些功能，就把这些需求挑出来，挑出来之后，这个迭代就不可以变动了，我们就是开发这些功能，直到完成上线，而这个迭代过程当中就会进行开发 测试 发布，最后完成迭代上线，发布给用户后，再进行回顾。我们看我们的燃尽图的一些表现，以及对我们团队当中做得好的和不好的，我们来进行一些总结，也可以叫做复盘，如果不去复盘，不去总结的话，整个团队是很难去改进的
