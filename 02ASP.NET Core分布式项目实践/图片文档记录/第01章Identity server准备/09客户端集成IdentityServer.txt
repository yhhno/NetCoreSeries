我们接着来实现api的部分
我们需要新建一个api的项目
dotnet new webapi --name ClientCredentialApi
给ClientCredentialApi中的values控制器，添加授权  也就是标签[Authorize]  有了这标签之后api就访问不了了
这个api用什么样的方式来保护 
给这个api加上认证与授权模式，同样 ClientCredentialApi项目需要添加Identityserver4的nuget包
但是它是一个客户端，我们不需要把identityserver整体加进来，
只需要添加 Identityserver4.accesstokenvalidation 包
dotnet restore
在startup中，添加Identityserver 授权到依赖注入里面去
     public void ConfigureServices(IServiceCollection services)
        {
            services.AddAuthentication("Bearer")//就是jwt模式 //添加授权
                .AddIdentityServerAuthentication(options =>//添加identityserver 授权 并并设置它的选项和配置
                {
                    options.Authority = "http://localhost:5000";//需要授权找谁
                    options.RequireHttpsMetadata = false;
                    options.ApiName = "api";//为自己定义个名字
                });


            services.AddMvc();
        }
启用授权
 public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseAuthentication();

            app.UseMvc();
        }

然后就结束了
所以说我们有了Identityserver，我们在api端加授权 变得非常简单，
启动下
dotnet run
访问api，显示401未授权

大家来想下，我们去哪去拿这个token，把token给api呢？
在http的header中 Authorization的key 可以传递token

去哪里获取token呢？  运行Identityservercenter   这个是服务端
 获取token地址： "token_endpoint": "http://localhost:21272/connect/token", 
 在postman中 post 这个地址 body中添加 三个参数 client_id：client   client_secrect：secrect  grant_type：client_credentials
 然后就可以获取token

 获取到token之后  启动ClientCredentialApi 客户端
 访问api时， header 添加 Authorization ： bearer +token  get方式访问，   
 访问成功

 此时我们是通过postman俩走通整个流程的，接下来我们会写一个第三方应用 来实现这个流程