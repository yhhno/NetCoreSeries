看看招聘，不要存在不行的念头

架构设计
这节课我们给大家讲一下架构设计 系统比较抽象的设计，让大家在通过上一次对业务理解之后 大概心理上有一个大概的轮廓，就是我们这个程序会开发成什么样子，

画原型工具 墨刀 画原型还是很方便的 基本上拖拖拽拽就可以了，会有有一些页面的跳转和动画

最开始画系统架构图，其实不用太美观，只要能够表达清楚意思就可以了 也可以在纸上画


我们有安卓 ios SPA三个客户端，客户端和api交互
我后面打算用微服务架构，我们就要针对我们的业务来划分领域，划分域，根据我们的域来拆分微服务，从我们的系统来讲，第一个会有用户资料可以称为用户域，第二是通讯录域，第三个项目域 第四个是消息域 这个消息是主要负责跟环信这块来通信 可以说是后台worker的东西，因为我们主要在前面的话， api在本地跟环信的sdk直接就进行消息的收发，然后我们会通过消息域跟环信的一个 我们可以说它是一个外部的sdk，它有一个 restfull 的services 来交互，
当然我们自己的这一套东西跟环信，肯定是走一个异步的方式，所以在这个地方势必会涉及到消息队列， 我们有一个EventBus 用RabbitMQ来实现，
我们会为用户域和通讯录域和项目域这三个建立自己的域名，因为他们是独立部署的，
user-api.jessetalk.cn
contactbook-api.jessetalk.cn
project-api.jessetalk.cn
而消息呢
message-api.jessetalk.cn

可能到后期我们还会调整这个设计，但最早期我们基本上就是这个样子。

我们不可能在客户端每一次调用不同api时，每次还记不同的地址，首先第一步我们会用到api gateway的地方 ，就是它会负责api的具体转发和路由这样的一个机制，api gateway是由OCelot实现的   它会负责和跟我们的域的api进行交互，它同时呢还带了认证和授权这一块，也就是它会负责验证客户端带的token， 当然它自己是不能做这件事，它是跟我们外部的sso，来做认证和授权的
而我们的Eventbus，为什么会有这个东西呢，通常情况下，比如说我们大家写消息的时候，有一种方式是直联， 比如说当一个用户发起一个好友申请的时候，我们这个时候就需要在app上也好在环信的sdk也好，都需要一个发送好友申请的界面，这个时候用户可能是这样的 ，它会直接调用用户和通讯录的api，如果是这种情况下呢，后面就会变成很复杂，大家可以再想一下，如果当一个人他发布一个项目，同时它的一个好友查看这个项目，加入这个项目的合伙人之后呢，会需要给他发送一些消息，那这个时候其实在项目的时候 又会涉及到调用消息的服务，  
通讯录也是一样，通讯录在好友创建的时候也会去调用消息的api，就会变得很复杂，频繁交错的
所以我们在这个地方，在一些跨域做一些事情处理的时候，我们就会引入EventBus这个概念，然后它主要是通过消息来解耦，不要让他们之间产生互联的一种操作，通常情况下，我们会有消息发到队列里面去，然后，最后由eventbus来统一调度这些消息，

接下来
我们用户的这一块，里面每一部分的api是怎么实现的，在用户这边，我们会用Identity server +mysql来实现， 当然会有一层缓存，redis实现
而项目中，也会用到mysql和redis
通讯录用redis  redis本身支持持久化
消息用mongodb 他主要是异步把你的消息同步，再存储过来，或者是一些内容存进来，有由eventbus调度，发给环信的sdk，最后推送到客户端 


暂时我们是这样子，如果后期发现问题，再改进

这个项目里我们会涉及到api网关 包括各个独立的api，以及eventbus event调度，然后在最后会把在eventbus上的 对于他消息的监控，包括整个api的访问全给加上来


第一步会做的是什么？ 第一步先把Identityserver 给构建起来，然后后面再结合api gateway把认证和授权加进去，然后客户端访问的是统一的地址， 这个地址可能是api.jessetalk.cn， 背后访问的是独立部署的四个域的api，，然后会用上sso Identityserver 拿到token 去做认证和授权


这就是初步的系统架构设计，