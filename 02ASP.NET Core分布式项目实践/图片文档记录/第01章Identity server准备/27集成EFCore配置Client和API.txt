开始时间6：00

学习能力当然包括纠错能力。
十分钟速成课程：前因后果，发展历程，要点生动形象，逻辑过程清晰，结果是理解了并在心中有数， 相对应的是，前因后果不明，底层不清楚，原理不清楚，直接拿来就用，不理解啊，看的文章，逻辑不清晰，表述有问题，看了后晕头转向，乱七八糟，只是死记硬背，毫无理解，在心中也毫无印象。 
如果没有类似十分钟速成课程的东西，自己去学，该怎么办呢？ 怎么做才能做到类似于它的效果呢？ 自己摘取信息？ 代入感？以教代学？

问题1： 为啥有返工呢，因为有的东西因为陌生等原因，需要时间去理解。
问题2： 出现问题如何正确的去做? 有逻辑的去分析  当出现PersistedGrantDbContext 没有找到的错误时，该怎么去排查， 一个劲的去想名字错误了，只想名字错误了
问题3：不同的Context，比如PersistedGrantDbContext，它就属于不同的数据库，也就是说，之前只局限于在一个数据库一个context中，进行操作，现在是多个，存在思维局限问题？
问题4：卡壳一般是什么原因造成的，1，基础知识欠缺。2，运用过程不清晰，也就是业务不清晰  3，接触一个事物属于一个比较高层次的抽象，底层不了解导致的内心恐慌，进而不知所措，

问题5：看到复杂的东西，顿时心里有点蒙
问题6.当听到在内存中模拟数据，蒙，当用完模拟数据听到要走数据，也蒙， 咋回事呢？ 原因1，identityserver4太复杂了，没搞清楚，就去用的时候，看到啥都是蒙的，因为知道的太少，看到啥 听到啥，听到要去做啥都蒙，那怎么办呢？ 原因2：有可能有一开始就想要全面理解的预期，但现实没有符合预期，就蒙了，也就是以啥都不知道去做很复杂的东西，当然没有底气了。  =》好的方法是不要多想，看到一步理解一步，每一步都走的踏实，降低预期。 蒙就是失去理智分析，裹足不前，消极情绪，不可取，


到这里我们基本把oidc和oauth  identityserver4 使用基本上都讲了。 还有关于授权码过期 client apiresource 等还没涉及到 ， 自己看文档，去学习能不能有这效果。

本节要把client apiresource identityresource切换到数据库， 我们用EF 现在sqlserver和mysql区别不是很大，只需要主要写sql时的一些细节。

添加IdentityServer4.EntityFramework 包， 你看看，IdentityServer4肯定预留了接口，然后用ef实现其底层数据库操作。
这里会有两个EF dbcontext，一个是我们的configration的context，一个是我们的 会保存一些授权的信息，token的信息


配置configration的context


执行migration 方式一
//启动后第一件事情做，，或者启动之前先做 ，两个时候任意都可以，先把数据库跑一遍。
            BuildWebHost(args)
                .MigrateDbContext<ApplicationDbContext>((context, services) =>
                {
                    //我们在这里做我们的初始化
                    new ApplicationDbContextSeed().SeedAsync(context, services)
                    .Wait();//异步方法的同步执行。
                })
                .Run();
执行migration 方式二

  //配置configration的ef context 初始化数据库
                .AddConfigurationStore(options =>
                {
                    options.ConfigureDbContext = builder =>
                    {
                        builder.UseSqlServer("Server=(localdb)\\MSSQLLocalDB;Database=MVCEFIdentity;Trusted_Connection=True;MultipleActiveResultSets=true", sql => sql.MigrationsAssembly());//sql.MigrationsAssembly() 就是当有新的migration，就执行更新
                    };
                })



完整代码
     //配置configration的ef context 初始化数据库
                .AddConfigurationStore(options =>
                {
                    options.ConfigureDbContext = builder =>
                    {
                        builder.UseSqlServer(connectionString, sql => sql.MigrationsAssembly(migartionAssembly);//sql.MigrationsAssembly() 就是当有新的migration，就执行更新
                    };
                })
至此完成了对configrationstore的配置

  
然后还有一个operationstore 配置和configrationstore配置一样，这样其实有两套表，，一套是用来存储我们的clients scope等一些信息，  operation这套表是用来存储我们的token，grants 就是给客户端授权 行为上 操作上的一些信息 
   //Operation context 初始化数据库
                .AddConfigurationStore(options =>
                {
                    options.ConfigureDbContext = builder =>
                    {
                        builder.UseSqlServer(connectionString, sql => sql.MigrationsAssembly(migartionAssembly));//sql.MigrationsAssembly() 就是当有新的migration，就执行更新
                    };
                })
Operation context和configration context 是在同一个数据库上的不同表，分属于不同的context。 比如PersistedGrantDbContext，他肯定有对应的model，migration命令可以识别出来。


删除的之前的内存中的 client等其他的配置。 


我们的configrationstore 和operationstore通过ef core加进来了，，接下来我们呢要创建下数据库 也就是数据库的初始化
Add-Migration initConfiguration -Context ConfigurationDbContext -OutputDir Data/Migrations/IdentityServer/ConfigurationDb 我们先让人出现在 OutputDir
这个命令会帮我们把第一次的migration添加过来， 也就是包括创建数据库，这些信息


Add-Migration initOperation -Context PersistedGrantDbContext -OutputDir Data/Migrations/IdentityServer/PersistedGrantDb
问题3：
不同的Context，比如PersistedGrantDbContext，它就属于不同的数据库，也就是说，之前只局限于在一个数据库一个context中，进行操作，现在是多个，存在思维局限问题？

因为identityserver4 本身就有PersistedGrantDbContext和ConfigurationDbContext 两个东西，我们只是配置好，就可以使用了

Update-Database -Context ConfigurationDbContext
问题2： 当出现PersistedGrantDbContext 没有找到的错误时，该怎么去排查， 一个劲的去想名字错误了，只想名字错误了
Update-Database -Context PersistedGrantDbContext

至此数据库配置完成，并成功生效。

至此我们还没有client，原先我们的client是通过config类来添加的，所以现在我们也要需要添加client，可以加一个初始化的方法来添加client，因为我们现在还有UI，有了UI之后，就可以通过UI来做添加client的事情和其他的一些信息，在没有的情况下，我们只能通过初始化方法来代码手工添加

在startup类中，添加一个InitIdentityServerDataBase()方法，
这里做的会跟我们ApplicationDbContextSeed类的SeedAsync方法有点像 
添加一个参数 IApplicationBuilder app InitIdentityServerDataBase(IApplicationBuilder app)
从app中获取一个IServiceProvider,来createScope，在此Scope下，所有的实例都是用完后销毁，
scope的依赖注入来获取identityserver4中的context的实例，比如ConfigurationContext，获取后添加client，apiresource等

 public void InitIdentityServerDataBase(IApplicationBuilder app)
        {
            using (var scope= app.ApplicationServices.CreateScope())
            {
                scope.ServiceProvider.GetRequiredService<PersistedGrantDbContext>().Database.Migrate();//执行PersistedGrantDbContext的migrate方法，因为不需要用PersistedGrantDbContext的实例来操作，所以没有赋值给一个变量
                var configurationDbContext = scope.ServiceProvider.GetRequiredService<ConfigurationDbContext>();//获取ConfigurationDbContext的实例，来进行数据库操作，也就是添加client等

                //下面的代码，说明client和apiresoource和identityresources等都全部走数据库，非内存
                if(!configurationDbContext.Clients.Any())
                {
                    foreach (var client in Config.GetClients())//数据源为内存中的client集合
                    {
                        configurationDbContext.Clients.Add(client.ToEntity());//需要把client类型转化为IdentityServer4.EntityFramework.Entities.Client
                    }
                    configurationDbContext.SaveChanges();
                }
                if (!configurationDbContext.ApiResources.Any())
                {
                    foreach (var apiResource in Config.GetResources())//数据源为内存中的apiresource集合
                    {
                        configurationDbContext.ApiResources.Add(apiResource.ToEntity());//需要把apiresource类型转化为IdentityServer4.EntityFramework.Entities.ApiResource
                    }
                    configurationDbContext.SaveChanges();
                }
                if (!configurationDbContext.IdentityResources.Any())
                {
                    foreach (var identityResource in Config.GetIdentityResources())//数据源为内存中的IdentityResource集合
                    {
                        configurationDbContext.IdentityResources.Add(identityResource.ToEntity());//需要把client类型转化为IdentityServer4.EntityFramework.Entities.IdentityResource
                    }
                    configurationDbContext.SaveChanges();
                }

            }
        }



然后调用InitIdentityServerDataBase 方法

 app.UseStaticFiles();

            app.UseIdentityServer();

            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Index}/{id?}");
            });

            InitIdentityServerDataBase(app);

它就会在每次启动的时候，去检查我们的数据库，判断是否执行这个方法执行这个方法


编译下，运行server端 运行client端  client可以登录，登录成功后，可以返回用户信息，说明一切信息不是模拟了，都存在数据库了

可以想象下，接下来的事情就很简单了，通过给系统加UI，加UI之后呢，通过ConfigurationContext，添加client，apiresource，identityresource等  
大家可以去思考下如果你要做一个通过UI来配置的权限系统，你会怎么样来做 

当调试出错时  错误提示 GrantTypes不对，也就是客户端请求的方式和允许的方式不对，想到修改server端代码 AllowedGrantTypes=GrantTypes.Hybrid,//允许访问的方式，但修改了没有效果，想到修改没有起到作用，因为修改实体不会更新到数据库， 然后就修改数据库， 至此发现一个问题，配置信息不能修改。只能到数据库中修改
apiresource的请求也发生了错误。 修改下就完事了


问题6.当听到在内存中模拟数据，蒙，当用完模拟数据听到要走数据，也蒙， 咋回事呢？ 原因1，identityserver4太复杂了，没搞清楚，就去用的时候，看到啥都是蒙的，因为知道的太少，看到啥 听到啥，听到要去做啥都蒙，那怎么办呢？ 原因2：有可能有一开始就想要全面理解的预期，但现实没有符合预期，就蒙了，也就是以啥都不知道去做很复杂的东西，当然没有底气了。  =》好的方法是不要多想，看到一步理解一步，每一步都走的踏实，降低预期。 蒙就是失去理智分析，裹足不前，消极情绪，不可取，