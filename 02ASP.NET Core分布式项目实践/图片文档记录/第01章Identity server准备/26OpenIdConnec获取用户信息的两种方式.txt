开始时间5.22 结束 5.55  半个小时。
学习是第一核心竞争力，
问题1： 不仅仅是去接受，有梳理的去接受，去学习，去理解。


那opeid的具体流程是啥呢？ 看官网文档呀。

上节课讲profileservice时，由于一些内容我们没有讲过，，所以这节课和大家一起回顾下
本节课主要是对opid标准的认识。
opid和oauth2协议的不同，主要大的一个区别是在认证改进的基础上，也就是在用户登录过之后，不管是授权码模式还是隐式模式，用户信息和accesstoken是可以一起返回的，用户信息包括在IDtoken里面 也可以不包含用户信息，也就是返回accesstoken和idtoken

Oauth流程，分为授权码模式和隐式模式， 授权码模式是 先访问一个授权中心的授权页面，用户输入用户名和密码之后，它会拿到一个code，然后第三方后端根据这code，在后端去获取accesstoken，然后拿到accesstoken，这就是授权码模式流程，
隐式模式流程，没有后端通过code或accesstoken，直接获取accesstoken
大家要理解Oauth两种模式的流程。

而opid它在这两种模式的基础上，多了一些东西，在获取accesstoken的同时多拿一个idtoken，idtoken包括用户信息，通过profileservice返回过去也就是上节课我们给大家讲的配置server端的client，
另外一种是，idtoken不包括用户信息，然后他会通过 server端的 userinfo endpoint来获取用户信息，但这不是获取用户信息的api，只是给客户端调用的，

我们是可以控制，要返回idtoken还是 accesstoken 还是  code  还是两个都返回
这说明啥，用户输入用户名和密码之后，就直接返回code 和其他东西。 没有通过code再获取其他accesstoken或者IDtoken

 options.ResponseType = OpenIdConnectResponseType.CodeIdToken;//有啥意义  设置返回信息


 /// <summary>
	/// Response types for OpenIdConnect.
	/// </summary>
	/// <remarks>Can be used to determine the message type by consumers of an <see cref="T:Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage" />.
	/// For example: OpenIdConnectMessageTests.Publics() sets <see cref="P:Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectMessage.ResponseType" />
	/// to <see cref="F:Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectResponseType.CodeIdToken" />.</remarks>
	public static class OpenIdConnectResponseType
	{
		/// <summary>
		/// Indicates 'code' type see: http://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth.
		/// For Example: http://openid.net/specs/openid-connect-core-1_0.html#codeExample.
		/// </summary>
		public const string Code = "code";

		/// <summary>
		/// Indicates 'code id_token' type see: http://openid.net/specs/openid-connect-core-1_0.html#HybridAuthRequest.
		/// For Example: http://openid.net/specs/openid-connect-core-1_0.html#code-id_tokenExample.
		/// </summary>
		public const string CodeIdToken = "code id_token";

		/// <summary>
		/// Indicates 'code id_token token' type see: http://openid.net/specs/openid-connect-core-1_0.html#HybridAuthRequest.
		/// For Example: http://openid.net/specs/openid-connect-core-1_0.html#code-id_token-tokenExample.
		/// </summary>
		public const string CodeIdTokenToken = "code id_token token";

		/// <summary>
		/// Indicates 'code token' type see: http://openid.net/specs/openid-connect-core-1_0.html#HybridAuthRequest.
		/// For Example: http://openid.net/specs/openid-connect-core-1_0.html#code-tokenExample.
		/// </summary>
		public const string CodeToken = "code token";

		/// <summary>
		/// Indicates 'id_token' type see: http://openid.net/specs/openid-connect-core-1_0.html#HybridAuthRequest.
		/// For Example: http://openid.net/specs/openid-connect-core-1_0.html#id_tokenExample.
		/// </summary>
		public const string IdToken = "id_token";

		/// <summary>
		/// Indicates 'id_token token' type see: http://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth.
		/// For Example: http://openid.net/specs/openid-connect-core-1_0.html#id_token-tokenExample.
		/// </summary>
		public const string IdTokenToken = "id_token token";

		/// <summary>
		/// Defined in OAuth v2 multiple response types 1.0 spec, included for completion.
		/// See: http://openid.net/specs/oauth-v2-multiple-response-types-1_0.html#OAuthResponseTypesReg.
		/// </summary>
		public const string None = "none";

		/// <summary>
		/// Defined in OAuth 2.0 spec, included for completion.
		/// See: https://tools.ietf.org/html/rfc6749#section-11.3.2.
		/// </summary>
		public const string Token = "token";
	}