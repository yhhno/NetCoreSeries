开始时间5:20 

要主要效率问题
问题1: 如何不能干巴巴的文字呢？ 如何像十分钟速成课程一样，学过就记住了呢？
问题1： 有时不必，逐字记录，要自己可以总结，因为有太多多余的话，但新东西必须逐字逐句记。
问题2：之前对知识点很模糊，模糊的知识点反过来影响我们的心态，对前因后果没清楚，也就是不知道为什么这么做？ 如单体 soa
问题3.由于作者出现了思路混乱，我们不能跟着混乱，想办法

今天开始我们课程的第三个部分，就是项目开发
之前呢 先给大家大致介绍下微服务
在介绍微服务之前呢 先来看下单体架构
什么是单体呢 它是比较容易理解的，因为我们一开始就是接触的是单体架构

问题1: 如何不能干巴巴的文字呢？ 如何像十分钟速成课程一样，学过就记住了呢？
它会有一个db 不管是mysql sqlserver  可能会单独一台server 也可能与web在一台server
可能会有一个web 不管mvc或者webform 我们讲一下的演进 最早的是webform 然后是mvc 总之它是一个网站，可以其他程序中访问：比如浏览器
web程序部署在一台server中  访问db
用户通过浏览器，访问在server中的web程序， 当然也可以是其他模拟器或者自定义程序，都是发送http请求，得到response。
有段时间没有磨刀，都忘记了带箭头的线在哪里了，所以还是熟能生巧

 从物理层面来看 就是浏览器  web层  db层
 对于web层内部而言， 就是我们的一套解决方案，最早是一个三层架构  web bll dal三层 至于有没有接口层呢 看各个公司架构情况

 当然后期，一些公司逐步的演进，朝一个什么样的方向去演进呢  （我们后面会去讲之前比较流行的soa架构）
 此时从三层怎么演进呢？ 
 问题2：之前对知识点很模糊，模糊的知识点反过来影响我们的心态，对前因后果没清楚，也就是不知道为什么这么做？ 如单体 soa

 移动端的出现导致了单体架构的演进

在移动端还没有那么流行的时候，三层没有暴露出api，移动端会需要api，怎么办？ 在原有的产品的基础上添加了移动端情况下，它往往会在三层的基础上，再做api层 api层负责和移动端交互，

情况如何变化
所以此时bll dal层变成通用的东西，供web层和api层调用，当然是在web层和api层逻辑一样的情况下，有时api逻辑和web层逻辑不一样，api就会单独写一些bll和dal 
部署的时候web和api当然要单独部署 同一台机器或者各自一台机器
哪怕是web层 中的三层变成四层，大体的结构上都差不多，还是单体架构

用户量，业务量的增加 会有什么变化？
此时是我们最早期的单体架构，最多你可能加一些中间件，因为在我们用户量没有起来之前，或者说你的业务量还没到那么复杂之前，我们可能会在物理的web层 加redis，一般有了redis可能还会有rebbitmq(由业务决定)，此时只要你的web层没有拆开，我们可以把BLL细分下，结合我们的项目 bll里面会有好几块，如user service和project service和recommand service  可以说在部署过去，这几块都是在一个进程内互相的交互调用，，
在我们没有做服务化拆分之前，我们只是做了api化也就是前后端分离，此时mvc去掉，变成了一个spa也就是单页，用vue实现或者其他前端框架实现，此时改动也是 统一了pc端和移动端。pc端和移动端都访问api， 原来的web层去掉了。也就是前后端分离。
只要bll没有做进程上的隔离，也就是没有服务化，依旧还是单体，哪怕你使用了redis，采用了前后端分离，

单体架构有什么好处呢
1.易于开发 也就是开发简单，就是api调bll，dal调用db，或者加一个application service层 把应用层和领域层 业务逻辑做一种拆分的话，其实写起来很快，其实还是curd操作，没有什么高级的东西，开发起来比较简单
2. 易于部署，单体架构整体打包，直接拷贝 其实我们只要部署一个网站就可以了，publish下，打个包 拷贝到服务器上，部署上还是很简单的，此时我们去做负载均衡是怎么做的，无非就是增加下几台服务器，各个服务器都部署一份，在服务器和PC端及移动端 之间加个负载均衡层，扩展也非常容易， 有两层上的扩展，一层是api的负载均衡就是物理上的web层，一层是db 就是分库分表 进行维度的扩展，
易于部署就是单体架构，打包后，拷贝过来 就可以了

问题3.由于作者出现了思路混乱，我们不能跟着混乱，想办法
说到扩展 第一步是把db独立到一个服务器上，并发量进来的时候，最容易造成瓶颈的
随着流量 并发量的增大，通用的演进之路  下节课继续，现在跳过

3.易于扩展 这就是怎么去扩展的问题？ web层通过负载均衡进行扩展，通过增加服务器copy包部署，扩容出来就可以了，很简单，特别容易快速的复制。还有db上的扩展，分库分表 ，
一般来说就是这两个扩展，只有到后期业务复杂的时候，我们才会遇到一些问题，这些问题才会导致我们在单体架构 就是在业务发展之后，单体架构不足以支撑，
一方面是效率就是性能的问题，当很多的用户上来之后，你通过web server的复制，也可以达到效果，但是它会形成比较大的浪费，，为什么呢、因为你没有办法很明确的知道你的用户量从哪里来，比如说我把所有的业务都放在api上，其中这个api中有一个促销的api，只有我们做活动的时候，它才会有特别高的流量进来，这个时候只能整体的扩展，没有办法针对促销的api进行扩容，这是流量上来的一个问题，
还有就是开发效率的问题 所有的业务都是一个bll中进行扩展，形成了一个巨大的项目，看到有点怕， 每个业务的代码可能牵扯的比较多 往往会改代码改出错误，代码质量不断下降，就是会有一个恶性循环， 当这种情况下，你需要去考虑架构上的升级，包括你巨大的代码 对ide的整个运行的时候对机器的开销，
还有一块，虽然我们部署简单，要做到持续集成

在业务变得越来越复杂的时候，团队规模越来越大的时候会遇到的一些问题。
1.巨大的代码，代码质量下滑，恶性循环
2。IDE要求比较高
3.web容器启动效率  你这么大的项目，启动有问题 web容器过载
4.持续部署带来的挑战 即便更新一句代码，也需要重新整体打包 编译 打包 部署 启动 都花很多时间

扩展的需要 导致问题
5.应用扩展， 没有办法针对某一块业务单独扩展。只能整体伸缩，不能单独对某一业务进行伸缩，而且还是同样的配置， 比如有点是对cpu有要求如计算型业务 需要加cpu，有的是对硬盘有要求比如io型业务需要加固态硬盘， 业务的不同对硬件的需求也不一样， 如果是整体放在一起，有可能在利用硬件资源有问题

6.规模化开发，一块业务时 单体还可以应对，当多个业务，多个团队开发的时候，单体会有很多问题
7.局限于一套技术栈， 对于有追求的开发者，想体验新技术时，  需要长期关注一套技术栈，对于开发团队比较简单，对于一些有追求的开发者，还是想体验一些新东西， 不想局限于老的技术，这种情况下对我们是非常不利的， 特别是当你技术 用了很多时间，每次都是重复，容易陷入一种机械化操作，就是简单的，感觉自己就是一个代码狗，写业务代码，做一些没有技术含量的事情，这时候需要做一些升级 不管是代码架构上 业务模式上，整体来升级，这种情况下， 我们需要对单体架构进行一些改造，我们前面做了api化之后，我们大家可以想象下，我们现在是一个api的站点 是一个系统 业务出现规模化之后呢往往会这样，比如原来业务只有一个产品api，后来来了一个业务系统 如后台系统，还会有一些客服系统（可能用户或资料的跟进）供应链系统 多系统之间怎么去利用代码， 单体架构之后，会引进soa就是面向服务的架构，  这是一个问题？ 抛给大家想一想在这种情况下 难道是把dal 拷到各个系统中 复用吗？ 你怎么去处理这种情况  多个系统后，比如客服系统中用到用户资料，客户的这些信息， db只有一个 你的客服系统怎么办？ 自己写sql 然后去调用你自己的客服db吗？ 这肯定会造成浪费， 客服系统有可能是另外一个团队开发，另外一个团队自己去写代码，去干重复的事情，会不会是一种浪费呢？  soa引进就是为了解决 在最早期 他为了解决子系统之间的 就是沟通的问题，就是说降低开发成本 诞生的soa 我们下节课给大家讲soa。

多个业务系统出现，导致单体架构的演进 以及soa的出现








 
