
问题1:咋一点都不好奇呢？
问题2:小步慢走，步子大了理解不了，对比如果我们直接去看那些新名字或者大名词 都不理解的东西，组成的文章或者其他， 当然看不懂了，或者在不理解背后的逻辑和实现，就直接用的话，肯定也不知道怎么去用？ 或者拿预期的结果去做事情，结果就是一个点，过程是一条线，不对等。我们走了错误的方式， 要找到原因，找到正确的方式，
问题3：还是效率低，
问题4：业务分析 用户体验

这节课我们来看下我们的设计，因为在我们开始微服务之前，或者是设计一个系统之前呢？
我们首先要了解的是它的业务，所以说我们今天这节课就是跟业务分析有关的， 
大家都会问到说 到底我们如何来开始设计一个系统，在开始设计之前呢，我们要做哪些事情？ 所以其实业务分析是一件非常重要的事情，他决定了这个系统的设计和架构，在很多 我们在做业务分析的时候呢？我们需要了解到的是？ 因为现在有一个产品原型，它相当于其实如果我们在公司里面开发的话， 相对来说 已经是有这个产品经理帮我们去做了市场上真正第一手需求的分析，那如果所在的公司没有产品经理的话，或者说本身作为一个架构师，或者技术leader 其实你也不需要完全听产品经理给你画出来的原型需求，因为往往他有可能把你带到坑里面去，自己呢？ 最好的办法就是自己去面临第一手业务，也就是从真正的用户哪里去了解他们的需求，然后呢？这样的话，即使有产品经理画原型的情况下 你才可以站在一个更高的角度，去看产品经理所画出来的需求，这个时候你才可以有理有据 跟他 去对需求 进行一些 可以说是 互相的去辩证的去看这个东西，因为万一他给你加了很多无理的需求 其实你是白做了，所以  当然这个产品原型是我画的，所以我们在这个项目实践时候 我就会从我理解的  因为用户的需求也是我去了解的，那么我画的原型并且我来做的业务架构设计，所以整体上来说呢 它全是我来做的 当然也就 是否正确 其实也没有  主要是业务人员或者我们找的种子用户 跟他们去看业务和需求实现的是否正确  
当然我们在这节课要做的 主要还是结合大家看的 假如我们看到的 拿到的是这样的需求 我们如何来进行开发的设计 这个设计呢我们要做的 其实在 我们还是说 往往就是说 我们在比较简单的需求，一听到这个需求，就大致的知道怎么去进行表设计啊 api的设计 数据库应该用什么呀， 如果是微服务的话，大致领域的 bounded context 也就是我们所谓的界限上下文 应该怎么去划分， 每一个领域的context下包含了哪些业务，就是哪些场景 哪些角色 哪些行为 对不对，
所以我们这里来看下  我们还是会借用这个方法 其实就是我们的角色和行为  就是uml里面的有一个叫user case（用户行为）  和user acter（用户角色），所以根据用户的角色和行为来进行的一个划分，这是一种基本的 也是最常用的方法之一  我们来看这个app  当然这个用户呢 acter 这个角色呢   在我们这个app里 其实 有不同维度去看这个系统，因为在有一些系统里面，它是会有这个 用户进来之后  已经会有角色化 非常明显的角色化，就是我们所谓的管理员 超级管理员或者是说管理员 普通用户这种角色区分  这种它更多是我们从 在软件操作上一种角色的划分，而我们真正还需要从业务角度去理解这个角色，我们现在来看这个app，把它运行起来（磨刀的原型设计还可以运行起来，） 他其实在这里只有一种用户 全部都是登录过的app用户，所以呢我们在进行角色划分的时候 需要从 尽量从业务里面去看这个角色才能知道  
首先我们可以理解为 就是 首先第一个 还是 把这个角色叫做用户 这个用户就是 基本上来说 就比较 涉及的面就比较广了，他应该是包含了我们系统当中 这个 所有的用户， 第一个角色我们叫用户 我们可以叫他app用户   我们就可以根据这个原型来 来确定我们用户的行为
那么首先第一个  我们这个app里面其实没有注册，因为我们看到这个地方 它就是输入手机号，获取验证码就可以完成登录了， 快速登录的过程， 因为我们在最开始要做到的是 最简单方式来让用户 也没有其他的信息 所以我们第一个行为叫登录，

问题： 每次开始都要找找节奏，
我们接着看，登录之后  我们像这种获取验证码这种小的行为 我们就先忽略 首先从大范围的行为上 因为这个属于一个user case 还记得我们在最开始，第一章讲敏捷的时候 一个user case它可以表述成更大的一个维度， 就是一个用户它要求可以输入手机号码，来获取验证码 ，进行登陆，这就是我们登录的一个user case 至于这个user case 怎么实现，还是可以进一步拆分， 但是我们先从这个维度来分析，

问题:对看到每个操作知道他背后的逻辑，乃至最终自己根据需求去设计 留存率
我们登录过之后，这里会有一个 获得系统推荐的好友，这个时候，我们又有了一个用户行为， 添加系统推荐用户 ，为什么会有这个需求呢？其实是因为我们这个app在最开始用户进来的的时候，你带给他一些好友，因为我们这个是基于 给用户推荐项目的，如果它刚开始进来的时候， 一个用户也没有的话，他必须自己去添加 或者给你拉好友，否则它是看不到任何推荐的项目，这个时候对于用户来讲呢没有什么好处，所以我们会默认给它推荐一些用户，那这些用户呢 就会成为它刚开始 在系统里面能够给它推荐项目的人， 这个场景呢 其实像在微博 这样的一些公共的平台上 其实一般都会有 包括像很多app 抖音啊 知乎啊， 还有我们像   进去的时候 他都会默认给你推荐一些用户， 这样的话可以让你看到一些 刚进来的时候 一些信息 可以提升这个新注册用户的留存，也就是 如果你进来全是空白，自己去添加用户又有一些成本的话，这个时候让你自己去很方便的 很简单的去获得一些用户 你可以看到一些信息  是可以提升留存率的， 所以我们在这个添加系统推荐用户 他也是一个user case  我们在这个地方 你可以简单来实现，我们现在是在后台配置的user id，直接推荐给所有的用户，那你将来可以扩展成 根据这个用户他所在地理位置 上海 可以大致的得到一些信息，推荐一些相关的用户，这个地方就涉及到一些推荐算法 这个可能是后面才实现的，那我们现在这里先简单实现， 然后点击跳过
这个时候就进入了机会  它是一个给用户推荐项目的页面，那我们先跳过， 进入到消息里面  消息大致看一下，里面其实就是一个IM 聊天的 跟微信有点像 好友之间聊天，涉及到你去添加好友 我们把添加好友也放进去， 我们可以在这个地方进行一些层次了， 登录 和添加系统推荐用户 之后， 我们在这个地方可以给他添加一个 添加好友的用户行为  在添加好友这个地方，大家可以看到 我们这里的行为 两个 一个是导入通讯录 从通讯录添加好友，  然后我们还有一个是手机号搜索来添加好友， 这两个都是属于添加好友的user case下面的  ，可以把这两个理解为它是一个user case下面的两个分支，  既然有了添加好友的功能 大家还可以再想下，我们这个地方其实  前面还会多出一个 我们怎么样去定义它， 添加好友那么我们会出现好友列表 对不对，添加完之后我们就会出现好友列表，在这个好友列表 我我们把它叫做通讯录管理 因为这样的话，我们其实这个通讯录管理下面会多出好几个功能， 添加好友 删除好友，当然在原型里面是没有做删除好友功能的，我们的第一版嘛  我们先留着，我们现在通讯录管理只有添加好友的功能 ，也是说只给你添加， 当然我们还可以有一个好友备注  这个好友备注是干什么呢？其实就是给用户去打标签，大家可以看到  添加完好友之后 我们有好友备注  还有查看好友资料 我们这个行为叫查看好友资料 我们可以查看好友信息同时呢可以给他添加一些备注 备注其实就是给他打标签 （这里有要一个局限，就是说在一个页面显示的东西，都是必须是一个动作，但存在一个页面多个动作，有的只是显示）所以在这个地方呢 就会出现另外一个东西叫标签列表维护，这个时候就会出现一个问题 我们这个时候就需要在好友标签这个行为上 进行一定的决策了  因为它不是那么简单， 为什么这么说呢 因为在好友标签这个地方 我们需要看一下  一个它是属于一个数据源 就是我们在添加标签的时候， 你在这个地方需要有一个已经有过的标签数据源，大家用微信就知道 你需要在这里创建标签  同时也可以删除这些标签， 我们现在的app没有做标签维护的功能， 但是在这个地方实现了添加标签 我们没有做删除标签 但是也就意味着 每一个用户他都有自己的一份标签列表，但是呢 在通讯录上 也就是每一个好友的备注 他也就一些标签的数据 ，大家就可以稍微思考下， 因为我们在这个地方到后期我们来设计的时候，就会涉及到我这个标签到底是放在我的用户下面 还是放在通讯录下面（业务拆分） 因为我们的通讯录 或者是放在好友备注上面，因为好友备注上面肯定会带标签信息的，那这个标签呢我们采用什么样的方式来放 或者说你给用户打标签这个行为  为什么 因为我们这里给用户打标签 是可以去新建标签的 那你打标签这个行为 比如说你是放在通讯录这个域下面  还是放到用户这个域下面，  好 这个地方呢 先把 这个获取标签列表这个行为，先放到用户下，我们现在还没有涉及到划分领域嘛 现在都是属于我们在做业务角色和行为的列举，我么只有列举出来，心里有数，才能更好的进行划分， 我们现在这里有标签列表维护了，也有好友备注也完成了 那用户这块呢 查看用户资料 这基本在通讯录这块  我们在回过头去检查下 我们的通讯录 有添加 然后通讯录管理其实还包括了搜索 我们可以叫好友筛选 好友查找也好都是属于通讯录功能， 好友筛选 查看好友资料 好友备注 添加好友 整个通讯录功能 然后我们再看一下其他的  基本上没有了，对不对
这个是诠释app用户可以做的一些事情  那接下来呢 他还有自己 点 我的 这个里面会有一些 这个资料的维护 对吧，我们给它也加一个 维护资料的用户行为  我们大家来看下 维护资料这里有什么信息呢？就是公司 职位 地区等等 这些都是他的资料 然后还有头像 地址等也是他的信息 所以这里一个维护资料就可以了，  我们看到用户它有这么多的行为， 我们接下来还会涉及到 每一个用户是不是都可以去获取机会列表，对吧，那我们就加下 获取项目机会的行为 ，然后呢这个获取项目机会的行为 我们系统里面再细分下，  因为这个地方 我们看机会这个地方有两种，一种是好友的项目，一种是系统推荐项目 还有一种是二度好友项目，也就是说你好友的好友的项目可能会出现这个地方，那你就可以建立这种夸好友的这种识别，那我们现在有3中选项，这是我们的机会列表 然后 当然这个地方是一个获取，我们还有什么 在这个地方我们还有 接下来我们说可以去查看这个项目 在这个地方 我们还没有去查看  属于我给他起了一个名字叫访问项目，因为我们现在看到的是一些匿名的信息， 也就是 因为我们这个项目他比较 信息比较敏感， 所以我们在流程来说 会把很多信息给屏蔽掉，不能显示，你需要签署一个协议，就是点击查看详细的时候 会同意一个协议 这协议信息 大致就是说你不能把这个信息透露给别人，否则呢 我这里可以看得到 因为有可能你拿到这个 看到这个信息后，你会跳过我 直接和项目方去获得联系，当然我们在信息上要做一些保密工作，所以如果你看到这个信息，我是知道你看过这个信息，并且呢 这个地方，我是可以知道 将来如果我发现 你必须是我的朋友  你是我的朋友 并且你看过我这个项目，将来我这个项目 如果给你挖走了，那我是可以根据这个协议，去告你的，所以我们要去解决这样的一个问题，就是 在我们做的这个产品所属的金融行业 他们之间这种信息的  由于信息暴露出去所产生的这种不安全感， 我们要把它解决掉， 所以在这个地方我们 建立了这种流程，因为用户来讲 他们原先是 我们之前讲过 他们是在微信朋友圈去发这种信息， 但是他是会发的很少的一部分信息，具体的他们会采用微信聊天的这种方式，这样会浪费比较多的时间，来跟一个一个的去说，但是呢她有不好直接全部放到这个地方 让有兴趣的人 因为有可能5个人联系他 只有一人真正想询问下，只有一个人才能真正把他解决问题 但是他会浪费很多其他的时间 其实就是没有效率的 所以我们通过这种方式暴露出来可以帮他去解决这种效率上的浪费，我尽量就是把更多的信息展示给你，如果你觉得真的是你可以做的一件事情，再来联系我，这样的话 我就免去很多沟通的事情，同时我又保证一定的信息安全， 那么我们这个地方，所以会有 第一个访问项目 第二个才是查看项目 第三个是参与项目， 当然如果在你没有名片信息的话 就没有资料的话，我们做了一个流程  app上的流程， 当然这一层属于用户体验 其实我们不需要记录名片信息，这个是体验层面的需求，就是我们最开始没有让用户填名片信息，只有当你后面想要去查看别人项目的时候，这个时候弹出来，让你上传名片信息， 或者维护你的个人信息，至少你会更愿意去填一些， 所以在这个地方我们就  假使我们传了名片， 这个时候我就可以查看项目， 查看到之后，接下来我就可以参与项目 我选一个项目身份，参与，好 那么一旦我完成了参与项目之后呢，我们看这个地方 参与项目有两个分支一个是中间人，一个是结束方，他们会对应着不同的流程， 为什么呢  我先给大家解释下这个流程， 这个是属于业务上的 现在假如我是用户，我在给你解释这个需求，财务顾问的话相当于我是一个中间人， 这个时候我会把这个项目添加到我的项目列表，重复的再去做刚刚的流程， 那么我把这个项目添加到我的项目列表之后，大家可以简单去理解为 这个相当于github上的fork一样，把这个项目就会添加到我的主页，那这样子的话，我的好友就可以看这个这个项目信息，它就会形成一个扩散的一个作用，就是说我的朋友有这个项目， 我拿到之后，我在扩散到我的朋友， 有可能我的朋友拿到之后再扩散到它的朋友，这样的话呢 大家都知道有一个叫六度空间的理论， 就是说不管要找谁，你都可以在通过6个人哪怕你要认识我们的习大大，你都可以通过6个人来认识到它，只要你想去做这件事，我们就是基于六度人脉的这个理论，来做的这个项目，你选择的项目身份是财务顾问，然后点击我是中间人，把项目添加到你的项目列表，同时给我们的项目发起人发一条消息，告诉他有人查看了它的项目并且加入了你的项目 成为了合伙人 这个时候他只要看一下就可以了，就简单看下，知道一下就可以了，这个地方会有有不同的角色产生了，什么不同的角色呢 在我的项目列表里面你如果进到项目详情呢， 你是可以  如果你是项目的   从我的项目列表进去，你会看到 这些信息 项目有多少个人查看但没有参加，有多少个人呢已经成为项目合伙人，你都可以看得到，所以在这个地方，角色会再一次区分，